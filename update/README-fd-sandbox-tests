
In the fd-sandbox environment, the iterative test process should be as follows:

1. Initialize fresh IDA instances comparable to current fd-stable configuration (with PHP 8.0)
and deploying the latest master branch of fairdata-ida, so that it is as close as possible
to the current NC21 based production configuration

2. Create the project and user accounts used by the safe tests, by executing the following commands:

NOTE: These accounts already exist in production, we are simply creating them in the sandbox

sudo -u apache /var/ida/admin/ida_project ADD 2011020 100
sudo -u apache /var/ida/admin/ida_user ADD ida-test-user 2011020

NOTE: The local user password for ida-test-user will be set to the test user password defined in
the TEST_USER_PASS variable in /var/ida/config/config.sh

3. Run all safe tests to ensure that everything is working 100%

NOTE: The latest version of both fairdata-ida-safe-tests and ida2-command-line-tools must be
installed; and the configuration for the safe tests must be edited so that when running the
IDA safe tests with the NC21 version of IDA, the IDA_CLI configuration variable must define
the path to ida2-command-line-tools/ida however if/when later running the IDA safe tests with
the NC31 version of IDA, the IDA_CLI configuration variable must define the path to be
/var/ida/cli/ida once the fairdata-ida-v3 repository has been deployed; i.e.

NC21: fairdata-ida + ida2-command-line-tools
NC31: fairdata-ida-v3, command line tools included in fairdata-ida-v3/cli

4. First test the entire end-to-end update/migration process with step variant 4a, then test
the update process with variant 4b, i.e. 

clean sandbox -> 1 -> 2 -> 3 -> 4a -> 5
clean sandbox -> 1 -> 2 -> 3 -> 4b -> 5

4a. Define IDA_ENVIRONMENT="DEV" and use non-production credentials per normal non-production
environment practices; which will result in /var/ida/update/extract-baseline-validation-data 
initializing and using test accounts using fairdata-test-accounts when it is run in step 4

NOTE: The fairdata-test-accounts repository is assumed to be cloned in /usr/local/fd but its
pathname can be redefined in init.sh in the FAIRDATA_TEST_ACCOUNTS environment variable

4b. Define IDA_ENVIRONMENT="PRODUCTION", clone the production database, and use production
configurations and credentials which match the cloned database; which will then fully test
the production update process with actual production data

NOTE: Credentials in config.sh and config.php must match the production configuration for variant 4b!

Execute /var/ida/update/create-dummy-user-directories so that the IDA admin scripts are happy
by fooling them data exists when it doesn't, they only sniff for the directories.

Execute /var/ida/utils/reset_PSO_passwords

NOTE: In the sandbox when using production data, the script /var/ida/update/rescan-cleanup
will not do anything, because otherwise it would break the file cache because the actual
project data files defined in the copied database do not exist on disk.

5. Follow the update steps as defined in /var/ida/update/README

NOTE: When running the safe tests in step 7 in /var/ida/update/README, use project 2011020 with
user ida-test-user; however, it will be necessary to reset the local password for the ida-test-user
account to the test user password defined in TEST_USER_PASS in /var/ida/config/config.sh with the
following command:

/var/ida/update/reset-test-user-password test-ida-user

NOTE: When following variant step 4a above, when not using an copy of production data:

- Do not stop postprocessing agents or rabbitmq, as they will be needed to initialize test accounts
  used for the DEV based tests.
- After running the safe tests, also log in via the web UI and SSO to project fd_test_ida_project as
  user fd_test_ida_user and verify that both the frozen and staging folders are visible and there is
  data in both the staging and frozen areas. 

----

As often as needed, repeat the above process ...

NOTE: Regarding interative testing in fd-sandbox, there is a utility script /var/ida/update/reset-new-database
that can be used to discard all migrated data from the new database 'nextcloud31' and should enable iterative
tests of the migration and validation process based on a cloned copy of the production database stored in the
old database 'nextcloud', without having to repeat the server update process to Nextcloud 31 and PHP 8.3.

Of course, testing of the full update process, including PHP 8.0->8.3, etc. would require discarding and
rebuilding the IDA instances and fully deleting the new database 'nextcloud31', but presumably (optimally)
the production database cloning would only need to be done once, and the database servers can be left out
of any rebuilding of the fd-sandbox environment during iterative testing of the update process, leaving
the old database 'nextcloud' entact and just deleting the new database.

***************************************************************************************************
*** Be sure to purge all production data and credentials from the fd-sandbox environment once all
*** testing has been completed and the updated version of IDA is ready for deployment.
***************************************************************************************************
