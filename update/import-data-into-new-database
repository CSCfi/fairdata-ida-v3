#!/bin/bash
#
# This script will import all essential data into the new database.
# All configuration variables will be taken from the IDA configuration.
#
# Strict assumptions are made about the location of git repositories; update as needed.

. /var/ida/update/init.sh

# Ensure DBNAME_NEW and DBNAME_OLD are defined in configuration and not the same
if [[ -z "$DBNAME_NEW" ]]; then
  echo "Error: Environment variable DBNAME_NEW must be defined" >&2
  exit 1
fi
if [[ -z "$DBNAME_OLD" ]]; then
  echo "Error: Environment variable DBNAME_OLD must be defined" >&2
  exit 1
fi
if [[ "$DBNAME_NEW" = "$DBNAME_OLD" ]]; then
  echo "Error: Environment variables DBNAME_NEW and DBNAME_OLD cannot be the same" >&2
  exit 1
fi

# Ensure DBHOST, DBPORT, DBUSER, and DBPASSWORD are defined in configuration
if [[ -z "$DBHOST" ]]; then
  echo "Error: Environment variable DBHOST must be defined" >&2
  exit 1
fi
if [[ -z "$DBPORT" ]]; then
  echo "Error: Environment variable DBPORT must be defined" >&2
  exit 1
fi
if [[ -z "$DBUSER" ]]; then
  echo "Error: Environment variable DBUSER must be defined" >&2
  exit 1
fi
if [[ -z "$DBPASSWORD" ]]; then
  echo "Error: Environment variable DBPASSWORD must be defined" >&2
  exit 1
fi

# Ensure DBDATA is defined in configuration, and that the subdirectory exists
if [[ -z "$DBDATA" ]]; then
  echo "Error: Environment variable DBDATA must be defined" >&2
  exit 1
fi
if [[ ! -d "$DBDATA" ]]; then
  echo "Error: The directory $DBDATA does not exist" >&2
  exit 1
fi

if [ "$1" = "--test" ]; then
    echo "TEST MODE: Data will be re-imported into new database!"
    OC_IDA_ACTION_FIELDS="$OC_IDA_ACTION_FIELDS_TEST"
fi

#------------------------------------------------------------------------------------------------------------------------

echo "--- Importing data into new database ..."

echo "Importing essential data into $DBNAME_NEW ..."

export PGPASSWORD="$DBPASSWORD"

PSQL="psql -h $DBHOST -p $DBPORT -d $DBNAME_NEW -U $DBUSER -v ON_ERROR_STOP=off"

IMPORT_ARGS="FORMAT CSV, HEADER TRUE, DELIMITER ',', QUOTE '\"', ESCAPE '\"', ENCODING 'UTF8'"

function import_table() {
    local table="$1"
    local fields="$2"
    local csv_file="${DBDATA}/${table}.csv"
    local err_file="${DBDATA}/${table}.err"
    echo "Importing data into ${table} ..."
    if [ ! -f "$csv_file" ]; then
        echo "Error: The file ${csv_file} does not exist" >&2
        exit 1
    fi
    local expected_record_count=$(/var/ida/update/count-csv-records < "$csv_file")
    if [ "$expected_record_count" = "0" ]; then
        echo "Error: The file ${csv_file} is empty" >&2
        exit 1
    fi
    local before_record_count=$($PSQL -t -A -c "SELECT COUNT(*) FROM ${table}")
    $PSQL -c "\COPY ${table} (${fields}) FROM STDIN WITH ($IMPORT_ARGS)" < "$csv_file" 2> "$err_file"
    local after_record_count=$($PSQL -t -A -c "SELECT COUNT(*) FROM ${table}")
    local imported_record_count=$((after_record_count - before_record_count))
    if [ "$imported_record_count" != "$expected_record_count" ]; then
        echo "Error: Failed to import exactly ${expected_record_count} expected records into ${table}: imported ${imported_record_count} records" >&2
        exit 1
    fi
    if [ -s "$err_file" ]; then
        echo "Error: Failed to import data into ${table}" >&2
        cat "$err_file" >&2
        exit 1
    fi
}

# Mimetype id's need to match what is in the old database, but we also need to add the new mimetypes supported
# by the new version of Nextcloud. To do so, we derive a list of all mimetypes from the new database, then clear
# the mimetypes table, import the mimetypes with ids as defined in the old database, and then add any missing
# mimetypes. 

echo "Extracting all mimetypes from oc_mimetypes ..."
OC_MIMETYPES=$($PSQL -t -A -c "SELECT mimetype FROM oc_mimetypes")
if [ "$1" = "--test" ]; then
    OC_MIMETYPES=$(echo "$OC_MIMETYPES $TEST_MIMETYPES" | tr -s ' ' '\n' | grep -v '^ *$' | sort -u)
fi
if [ "$OC_MIMETYPES" = "" ]; then
    echo "Failed to extract mimetypes from oc_mimetypes"
    exit 1
fi

echo "OC_MIMETYPES:"
echo "$OC_MIMETYPES"

IFS=$'\n' read -rd '' -a OC_MIMETYPES_ARRAY <<< "$OC_MIMETYPES"

echo "Deleting data from oc_mimetypes ..."
$PSQL -c "TRUNCATE TABLE oc_mimetypes RESTART IDENTITY" 2> "$DBDATA/oc_mimetypes.err"

if [[ -s "$DBDATA/oc_mimetypes.err" ]]; then
    echo "Error: Failed to delete data in oc_mimetypes" >&2
    cat "$DBDATA/oc_mimetypes.err" >&2
    exit 1
fi

import_table "oc_mimetypes" "$OC_MIMETYPES_FIELDS"

echo "Updating sequence oc_mimetypes_id_seq ..."
$PSQL -t -A -c "SELECT setval('oc_mimetypes_id_seq', COALESCE((SELECT MAX(id) FROM oc_mimetypes), 1), true)" 2> "$DBDATA/oc_mimetypes.err"

if [[ -s "$DBDATA/oc_mimetypes.err" ]]; then
    echo "Error: Failed to update sequence oc_mimetypes_id_seq" >&2
    cat "$DBDATA/oc_mimetypes.err" >&2
    exit 1
fi

echo "Adding any missing mimetypes into oc_mimetypes ..."
for MIMETYPE in "${OC_MIMETYPES_ARRAY[@]}"; do
    echo "Checking mimetype $MIMETYPE ..."
    $PSQL -c "MERGE INTO oc_mimetypes t USING (SELECT '$MIMETYPE' AS mimetype) s ON t.mimetype = s.mimetype WHEN NOT MATCHED THEN INSERT (mimetype) VALUES (s.mimetype)" 2>> "$DBDATA/oc_mimetypes.err" | \
        grep -v '^$' | grep -v "MERGE 0"
done

if [[ -s "$DBDATA/oc_mimetypes.err" ]]; then
    echo "Error: Failed to merge data into oc_mimetypes" >&2
    cat "$DBDATA/oc_mimetypes.err" >&2
    exit 1
fi

import_table "oc_storages"           "$OC_STORAGES_FIELDS"
import_table "oc_accounts"           "$OC_ACCOUNTS_FIELDS"
import_table "oc_accounts_data"      "$OC_ACCOUNTS_DATA_FIELDS"
import_table "oc_groups"             "$OC_GROUPS_FIELDS"
import_table "oc_group_user"         "$OC_GROUP_USER_FIELDS"
import_table "oc_users"              "$OC_USERS_FIELDS"
import_table "oc_preferences"        "$OC_PREFERENCES_FIELDS"
import_table "oc_share"              "$OC_SHARE_FIELDS"
import_table "oc_filecache"          "$OC_FILECACHE_FIELDS"
import_table "oc_filecache_extended" "$OC_FILECACHE_EXTENDED_FIELDS"
import_table "oc_ida_action"         "$OC_IDA_ACTION_FIELDS"
import_table "oc_ida_data_change"    "$OC_IDA_DATA_CHANGE_FIELDS"
import_table "oc_ida_frozen_file"    "$OC_IDA_FROZEN_FILE_FIELDS"
import_table "oc_mounts"             "$OC_MOUNTS_FIELDS"

echo "Importing completed."
