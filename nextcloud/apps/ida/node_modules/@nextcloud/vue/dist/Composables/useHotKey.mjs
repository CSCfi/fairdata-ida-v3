import { onKeyStroke } from "@vueuse/core";
const disableKeyboardShortcuts = window.OCP?.Accessibility?.disableKeyboardShortcuts?.();
const isMac = /mac|ipad|iphone|darwin/i.test(navigator.userAgent);
function shouldIgnoreEvent(event) {
  if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement || event.target instanceof HTMLSelectElement || event.target?.isContentEditable) {
    return true;
  }
  return document.getElementsByClassName("modal-mask").length !== 0;
}
const eventHandler = (callback, options) => (event) => {
  const ctrlKeyPressed = isMac ? event.metaKey : event.ctrlKey;
  if (ctrlKeyPressed !== Boolean(options.ctrl)) {
    return;
  } else if (!!options.alt !== event.altKey) {
    return;
  } else if (!!options.shift !== event.shiftKey) {
    return;
  } else if (shouldIgnoreEvent(event)) {
    return;
  }
  if (options.prevent) {
    event.preventDefault();
  }
  if (options.stop) {
    event.stopPropagation();
  }
  callback(event);
};
function useHotKey(key, callback = () => {
}, options = {}) {
  if (disableKeyboardShortcuts) {
    return () => {
    };
  }
  const stopKeyDown = onKeyStroke(key, eventHandler(callback, options), {
    eventName: "keydown",
    dedupe: true,
    passive: !options.prevent
  });
  const stopKeyUp = options.push ? onKeyStroke(key, eventHandler(callback, options), {
    eventName: "keyup",
    passive: !options.prevent
  }) : () => {
  };
  return () => {
    stopKeyDown();
    stopKeyUp();
  };
}
export {
  useHotKey
};
