import { CancelablePromise } from 'cancelable-promise';
import { FileStat } from 'webdav';
import { WebDAVClient } from 'webdav';

declare interface Attribute {
    [key: string]: any;
}

export declare type DavProperty = {
    [key: string]: string;
};

export declare const defaultDavNamespaces: {
    d: string;
    nc: string;
    oc: string;
    ocs: string;
};

export declare const defaultDavProperties: string[];

/**
 * The DAV remote URL used as base URL for the WebDAV client
 * This is a cached version of `getRemoteURL`
 */
export declare const defaultRemoteURL: string;

/**
 * The DAV root path for the current user
 * This is a cached version of `getRemoteURL`
 */
export declare const defaultRootPath: string;

/**
 * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
declare enum FileType {
    Folder = "folder",
    File = "file"
}

/**
 * Get a WebDAV client configured to include the Nextcloud request token
 *
 * @param remoteURL The DAV server remote URL
 * @param headers Optional additional headers to set for every request
 */
export declare const getClient: (remoteURL?: string, headers?: Record<string, string>) => WebDAVClient;

/**
 * Get the registered dav namespaces
 */
export declare const getDavNameSpaces: () => string;

/**
 * Get the registered dav properties
 */
export declare const getDavProperties: () => string;

/**
 * Get the default PROPFIND request body
 */
export declare const getDefaultPropfind: () => string;

/**
 * Use WebDAV to query for favorite Nodes
 *
 * @param davClient The WebDAV client to use for performing the request
 * @param path Base path for the favorites, if unset all favorites are queried
 * @param davRoot The root path for the DAV user (defaults to `defaultRootPath`)
 * @example
 * ```js
 * import { getClient, defaultRootPath, getFavoriteNodes } from '@nextcloud/files'
 *
 * const client = getClient()
 * // query favorites for the root
 * const favorites = await getFavoriteNodes(client)
 * // which is the same as writing:
 * const favorites = await getFavoriteNodes(client, '/', defaultRootPath)
 * ```
 */
export declare const getFavoriteNodes: (davClient: WebDAVClient, path?: string, davRoot?: string) => CancelablePromise<Node_2[]>;

/**
 * Get the REPORT body to filter for favorite nodes
 */
export declare const getFavoritesReport: () => string;

/**
 * Get the SEARCH body to search for recently modified files
 *
 * @param lastModified Oldest timestamp to include (Unix timestamp)
 * @example
 * ```ts
 * // SEARCH for recent files need a different DAV endpoint
 * const client = davGetClient(generateRemoteUrl('dav'))
 * // Timestamp of last week
 * const lastWeek = Math.round(Date.now() / 1000) - (60 * 60 * 24 * 7)
 * const contentsResponse = await client.getDirectoryContents(path, {
 *     details: true,
 *     data: davGetRecentSearch(lastWeek),
 *     headers: {
 *         method: 'SEARCH',
 *         'Content-Type': 'application/xml; charset=utf-8',
 *     },
 *     deep: true,
 * }) as ResponseDataDetailed<FileStat[]>
 * ```
 */
export declare const getRecentSearch: (lastModified: number) => string;

/**
 * Get the DAV remote URL used as base URL for the WebDAV client
 * It also handles public shares
 */
export declare function getRemoteURL(): string;

/**
 * Get the DAV root path for the current user or public share
 */
export declare function getRootPath(): string;

declare abstract class Node_2 {
    private _data;
    private _attributes;
    private _knownDavService;
    private readonlyAttributes;
    private handler;
    constructor(data: NodeData, davService?: RegExp);
    /**
     * Get the source url to this object
     * There is no setter as the source is not meant to be changed manually.
     * You can use the rename or move method to change the source.
     */
    get source(): string;
    /**
     * Get the encoded source url to this object for requests purposes
     */
    get encodedSource(): string;
    /**
     * Get this object name
     * There is no setter as the source is not meant to be changed manually.
     * You can use the rename or move method to change the source.
     */
    get basename(): string;
    /**
     * The nodes displayname
     * By default the display name and the `basename` are identical,
     * but it is possible to have a different name. This happens
     * on the files app for example for shared folders.
     */
    get displayname(): string;
    /**
     * Set the displayname
     */
    set displayname(displayname: string);
    /**
     * Get this object's extension
     * There is no setter as the source is not meant to be changed manually.
     * You can use the rename or move method to change the source.
     */
    get extension(): string | null;
    /**
     * Get the directory path leading to this object
     * Will use the relative path to root if available
     *
     * There is no setter as the source is not meant to be changed manually.
     * You can use the rename or move method to change the source.
     */
    get dirname(): string;
    /**
     * Is it a file or a folder ?
     */
    abstract get type(): FileType;
    /**
     * Get the file mime
     * There is no setter as the mime is not meant to be changed
     */
    get mime(): string | undefined;
    /**
     * Get the file modification time
     */
    get mtime(): Date | undefined;
    /**
     * Set the file modification time
     */
    set mtime(mtime: Date | undefined);
    /**
     * Get the file creation time
     * There is no setter as the creation time is not meant to be changed
     */
    get crtime(): Date | undefined;
    /**
     * Get the file size
     */
    get size(): number | undefined;
    /**
     * Set the file size
     */
    set size(size: number | undefined);
    /**
     * Get the file attribute
     * This contains all additional attributes not provided by the Node class
     */
    get attributes(): Attribute;
    /**
     * Get the file permissions
     */
    get permissions(): Permission;
    /**
     * Set the file permissions
     */
    set permissions(permissions: Permission);
    /**
     * Get the file owner
     * There is no setter as the owner is not meant to be changed
     */
    get owner(): string | null;
    /**
     * Is this a dav-related ressource ?
     */
    get isDavRessource(): boolean;
    /**
     * Get the dav root of this object
     * There is no setter as the root is not meant to be changed
     */
    get root(): string | null;
    /**
     * Get the absolute path of this object relative to the root
     */
    get path(): string;
    /**
     * Get the node id if defined.
     * There is no setter as the fileid is not meant to be changed
     */
    get fileid(): number | undefined;
    /**
     * Get the node status.
     */
    get status(): NodeStatus | undefined;
    /**
     * Set the node status.
     */
    set status(status: NodeStatus | undefined);
    /**
     * Get the node data
     */
    get data(): NodeData;
    /**
     * Move the node to a new destination
     *
     * @param {string} destination the new source.
     * e.g. https://cloud.domain.com/remote.php/dav/files/emma/Photos/picture.jpg
     */
    move(destination: string): void;
    /**
     * Rename the node
     * This aliases the move method for easier usage
     *
     * @param basename The new name of the node
     */
    rename(basename: string): void;
    /**
     * Update the mtime if exists
     */
    updateMtime(): void;
    /**
     * Update the attributes of the node
     * Warning, updating attributes will NOT automatically update the mtime.
     *
     * @param attributes The new attributes to update on the Node attributes
     */
    update(attributes: Attribute): void;
    /**
     * Returns a clone of the node
     */
    abstract clone(): Node_2;
}

declare interface NodeData {
    /** Unique ID */
    id?: number;
    /**
     * URL to the ressource.
     * e.g. https://cloud.domain.com/remote.php/dav/files/emma/Photos/picture.jpg
     * or https://domain.com/Photos/picture.jpg
     */
    source: string;
    /** Last modified time */
    mtime?: Date;
    /** Creation time */
    crtime?: Date;
    /** The mime type Optional for folders only */
    mime?: string;
    /** The node size type */
    size?: number;
    /** The node permissions */
    permissions?: Permission;
    /** The owner  UID of this node */
    owner: string | null;
    /** Optional the displayname of this node */
    displayname?: string;
    /** The node attributes */
    attributes?: Attribute;
    /**
     * The absolute root of the home relative to the service.
     * It is highly recommended to provide that information.
     * e.g. /files/emma
     */
    root?: string;
    /** The node status */
    status?: NodeStatus;
}

declare enum NodeStatus {
    /** This is a new node and it doesn't exists on the filesystem yet */
    NEW = "new",
    /** This node has failed and is unavailable  */
    FAILED = "failed",
    /** This node is currently loading or have an operation in progress */
    LOADING = "loading",
    /** This node is locked and cannot be modified */
    LOCKED = "locked"
}

/**
 * Parse the WebDAV permission string to a permission enum
 *
 * @param permString The DAV permission string
 */
export declare const parsePermissions: (permString?: string) => number;

/**
 * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
/**
 * Node permissions
 */
declare enum Permission {
    NONE = 0,
    CREATE = 4,
    READ = 1,
    UPDATE = 2,
    DELETE = 8,
    SHARE = 16,
    ALL = 31
}

/**
 * Register custom DAV properties
 *
 * Can be used if your app introduces custom DAV properties, so e.g. the files app can make use of it.
 *
 * @param prop The property
 * @param namespace The namespace of the property
 */
export declare const registerDavProperty: (prop: string, namespace?: DavProperty) => boolean;

/**
 * Covert DAV result `FileStat` to `Node`
 *
 * @param node The DAV result
 * @param filesRoot The DAV files root path
 * @param remoteURL The DAV server remote URL (same as on `getClient`)
 */
export declare const resultToNode: (node: FileStat, filesRoot?: string, remoteURL?: string) => Node_2;

export { }
