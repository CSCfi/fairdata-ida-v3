--- /var/ida/nextcloud-new/lib/private/L10N/Factory.php	2024-11-05 08:30:09.604706889 +0000
+++ /var/ida/nextcloud-old/lib/private/L10N/Factory.php	2024-02-20 10:11:39.301443348 +0000
@@ -1,24 +1,49 @@
 <?php
-
-declare(strict_types=1);
 /**
- * SPDX-FileCopyrightText: 2016 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-only
+ * @copyright Copyright (c) 2016, ownCloud, Inc.
+ * @copyright 2016 Roeland Jago Douma <roeland@famdouma.nl>
+ * @copyright 2016 Lukas Reschke <lukas@statuscode.ch>
+ *
+ * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
+ * @author Bart Visscher <bartv@thisnet.nl>
+ * @author Bjoern Schiessle <bjoern@schiessle.org>
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Georg Ehrke <oc.list@georgehrke.com>
+ * @author GretaD <gretadoci@gmail.com>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author John Molakvo√¶ (skjnldsv) <skjnldsv@protonmail.com>
+ * @author Lukas Reschke <lukas@statuscode.ch>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Robin Appelman <robin@icewind.nl>
+ * @author Robin McCorkell <robin@mccorkell.me.uk>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author Thomas Citharel <nextcloud@tcit.fr>
+ *
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program. If not, see <http://www.gnu.org/licenses/>
+ *
  */
+
 namespace OC\L10N;
 
-use OCP\App\AppPathNotFoundException;
-use OCP\App\IAppManager;
-use OCP\ICache;
-use OCP\ICacheFactory;
 use OCP\IConfig;
 use OCP\IRequest;
 use OCP\IUser;
 use OCP\IUserSession;
 use OCP\L10N\IFactory;
 use OCP\L10N\ILanguageIterator;
-use function is_null;
+use Firebase\JWT\JWT;
 
 /**
  * A factory that generates language instances
@@ -36,7 +62,7 @@
 	/**
 	 * @var array Structure: App => string[]
 	 */
-	protected $availableLanguages = [];
+	protected $availableLanguages = ['en', 'fi', 'sv'];
 
 	/**
 	 * @var array
@@ -46,7 +72,7 @@
 	/**
 	 * @var array
 	 */
-	protected $availableLocales = [];
+	protected $availableLocales = ['en_US', 'fi_FI', 'sv_FI'];
 
 	/**
 	 * @var array Structure: string => callable
@@ -54,21 +80,35 @@
 	protected $pluralFunctions = [];
 
 	public const COMMON_LANGUAGE_CODES = [
-		'en', 'es', 'fr', 'de', 'de_DE', 'ja', 'ar', 'ru', 'nl', 'it',
-		'pt_BR', 'pt_PT', 'da', 'fi_FI', 'nb_NO', 'sv', 'tr', 'zh_CN', 'ko'
+		'en', 'fi', 'sv', 'en_US', 'en_UK', 'en_GB', 'fi_FI', 'sv_SV', 'sv_FI'
 	];
 
-	private ICache $cache;
+	/** @var IConfig */
+	protected $config;
 
-	public function __construct(
-		protected IConfig $config,
-		protected IRequest $request,
-		protected IUserSession $userSession,
-		ICacheFactory $cacheFactory,
-		protected string $serverRoot,
-		protected IAppManager $appManager,
-	) {
-		$this->cache = $cacheFactory->createLocal('L10NFactory');
+	/** @var IRequest */
+	protected $request;
+
+	/** @var IUserSession */
+	protected $userSession;
+
+	/** @var string */
+	protected $serverRoot;
+
+	/**
+	 * @param IConfig $config
+	 * @param IRequest $request
+	 * @param IUserSession $userSession
+	 * @param string $serverRoot
+	 */
+	public function __construct(IConfig $config,
+								IRequest $request,
+								IUserSession $userSession,
+								$serverRoot) {
+		$this->config = $config;
+		$this->request = $request;
+		$this->userSession = $userSession;
+		$this->serverRoot = $serverRoot;
 	}
 
 	/**
@@ -106,10 +146,7 @@
 
 			if (!isset($this->instances[$lang][$app])) {
 				$this->instances[$lang][$app] = new L10N(
-					$this,
-					$app,
-					$lang,
-					$locale,
+					$this, $app, $lang, $locale,
 					$this->getL10nFilesForApp($app, $lang)
 				);
 			}
@@ -121,101 +158,36 @@
 	/**
 	 * Find the best language
 	 *
-	 * @param string|null $appId App id or null for core
-	 *
+	 * @param string|null $app App id or null for core
 	 * @return string language If nothing works it returns 'en'
 	 */
-	public function findLanguage(?string $appId = null): string {
-		// Step 1: Forced language always has precedence over anything else
-		$forceLang = $this->config->getSystemValue('force_language', false);
-		if (is_string($forceLang)) {
-			$this->requestLanguage = $forceLang;
-		}
-
-		// Step 2: Return cached language
-		if ($this->requestLanguage !== '' && $this->languageExists($appId, $this->requestLanguage)) {
-			return $this->requestLanguage;
-		}
-
-		/**
-		 * Step 3: At this point Nextcloud might not yet be installed and thus the lookup
-		 * in the preferences table might fail. For this reason we need to check
-		 * whether the instance has already been installed
-		 *
-		 * @link https://github.com/owncloud/core/issues/21955
-		 */
-		if ($this->config->getSystemValueBool('installed', false)) {
-			$userId = !is_null($this->userSession->getUser()) ? $this->userSession->getUser()->getUID() :  null;
-			if (!is_null($userId)) {
-				$userLang = $this->config->getUserValue($userId, 'core', 'lang', null);
-			} else {
-				$userLang = null;
-			}
-		} else {
-			$userId = null;
-			$userLang = null;
-		}
-		if ($userLang) {
-			$this->requestLanguage = $userLang;
-			if ($this->languageExists($appId, $userLang)) {
-				return $userLang;
-			}
-		}
+	public function findLanguage($app = null) {
 
-		// Step 4: Check the request headers
+		if (array_key_exists('HTTP_HOST', $_SERVER)) {
+	        $hostname = $_SERVER['HTTP_HOST'];
+	        $domain = substr($hostname, strpos($hostname, ".") + 1);
+	        $prefix = preg_replace('/[^a-zA-Z0-9]/', '_', $domain);
+	        $cookie = $prefix . '_fd_sso_session';
+	        if (array_key_exists($cookie, $_COOKIE)) {
+                $key =\OC::$server->getSystemConfig()->getValue('SSO_KEY');
 		try {
-			// Try to get the language from the Request
-			$lang = $this->getLanguageFromRequest($appId);
-			if ($userId !== null && $appId === null && !$userLang) {
-				$this->config->setUserValue($userId, 'core', 'lang', $lang);
-			}
-			return $lang;
-		} catch (LanguageNotFoundException $e) {
-			// Finding language from request failed fall back to default language
-			$defaultLanguage = $this->config->getSystemValue('default_language', false);
-			if ($defaultLanguage !== false && $this->languageExists($appId, $defaultLanguage)) {
-				return $defaultLanguage;
-			}
-		}
-
-		// Step 5: fall back to English
-		return 'en';
+		            $session = @JWT::decode($_COOKIE[$cookie], $key, array('HS256'));
+				} catch (\Exception $e) {
+					$session = null;
 	}
-
-	public function findGenericLanguage(?string $appId = null): string {
-		// Step 1: Forced language always has precedence over anything else
-		$forcedLanguage = $this->config->getSystemValue('force_language', false);
-		if ($forcedLanguage !== false) {
-			return $forcedLanguage;
+				if ($session && $session->language) {
+		            return $session->language;
 		}
-
-		// Step 2: Check if we have a default language
-		$defaultLanguage = $this->config->getSystemValue('default_language', false);
-		if ($defaultLanguage !== false && $this->languageExists($appId, $defaultLanguage)) {
-			return $defaultLanguage;
-		}
-
-		// Step 3.1: Check if Nextcloud is already installed before we try to access user info
-		if (!$this->config->getSystemValueBool('installed', false)) {
-			return 'en';
-		}
-		// Step 3.2: Check the current user (if any) for their preferred language
-		$user = $this->userSession->getUser();
-		if ($user !== null) {
-			$userLang = $this->config->getUserValue($user->getUID(), 'core', 'lang', null);
-			if ($userLang !== null) {
-				return $userLang;
 			}
 		}
 
-		// Step 4: Check the request headers
 		try {
-			return $this->getLanguageFromRequest($appId);
-		} catch (LanguageNotFoundException $e) {
-			// Ignore and continue
+			$lang = $this->getLanguageFromRequest($app);
+            if ($lang == 'en' || $lang == 'fi' || $lang == 'sv') {
+			    return $lang;
 		}
+		} catch (LanguageNotFoundException $e) { ; }
 
-		// Step 5: fall back to English
 		return 'en';
 	}
 
@@ -226,38 +198,15 @@
 	 * @return null|string
 	 */
 	public function findLocale($lang = null) {
-		$forceLocale = $this->config->getSystemValue('force_locale', false);
-		if (is_string($forceLocale) && $this->localeExists($forceLocale)) {
-			return $forceLocale;
-		}
-
-		if ($this->config->getSystemValueBool('installed', false)) {
-			$userId = $this->userSession->getUser() !== null ? $this->userSession->getUser()->getUID() :  null;
-			$userLocale = null;
-			if ($userId !== null) {
-				$userLocale = $this->config->getUserValue($userId, 'core', 'locale', null);
-			}
-		} else {
-			$userId = null;
-			$userLocale = null;
-		}
 
-		if ($userLocale && $this->localeExists($userLocale)) {
-			return $userLocale;
+		if ($lang == 'fi') {
+			return 'fi_FI';
 		}
 
-		// Default : use system default locale
-		$defaultLocale = $this->config->getSystemValue('default_locale', false);
-		if ($defaultLocale !== false && $this->localeExists($defaultLocale)) {
-			return $defaultLocale;
+		if ($lang == 'sv'){
+			return 'sv_FI';
 		}
 
-		// If no user locale set, use lang as locale
-		if ($lang !== null && $this->localeExists($lang)) {
-			return $lang;
-		}
-
-		// At last, return USA
 		return 'en_US';
 	}
 
@@ -268,7 +217,7 @@
 	 * @param string $locale
 	 * @return null|string
 	 */
-	public function findLanguageFromLocale(string $app = 'core', ?string $locale = null) {
+	public function findLanguageFromLocale(string $app = 'core', string $locale = null) {
 		if ($this->languageExists($app, $locale)) {
 			return $locale;
 		}
@@ -284,18 +233,14 @@
 	 * Find all available languages for an app
 	 *
 	 * @param string|null $app App id or null for core
-	 * @return string[] an array of available languages
+	 * @return array an array of available languages
 	 */
-	public function findAvailableLanguages($app = null): array {
+	public function findAvailableLanguages($app = null) {
 		$key = $app;
 		if ($key === null) {
 			$key = 'null';
 		}
 
-		if ($availableLanguages = $this->cache->get($key)) {
-			$this->availableLanguages[$key] = $availableLanguages;
-		}
-
 		// also works with null as key
 		if (!empty($this->availableLanguages[$key])) {
 			return $this->availableLanguages[$key];
@@ -307,7 +252,7 @@
 			$files = scandir($dir);
 			if ($files !== false) {
 				foreach ($files as $file) {
-					if (str_ends_with($file, '.json') && !str_starts_with($file, 'l10n')) {
+					if (substr($file, -5) === '.json' && substr($file, 0, 4) !== 'l10n') {
 						$available[] = substr($file, 0, -5);
 					}
 				}
@@ -315,7 +260,7 @@
 		}
 
 		// merge with translations from theme
-		$theme = $this->config->getSystemValueString('theme');
+		$theme = $this->config->getSystemValue('theme');
 		if (!empty($theme)) {
 			$themeDir = $this->serverRoot . '/themes/' . $theme . substr($dir, strlen($this->serverRoot));
 
@@ -323,7 +268,7 @@
 				$files = scandir($themeDir);
 				if ($files !== false) {
 					foreach ($files as $file) {
-						if (str_ends_with($file, '.json') && !str_starts_with($file, 'l10n')) {
+						if (substr($file, -5) === '.json' && substr($file, 0, 4) !== 'l10n') {
 							$available[] = substr($file, 0, -5);
 						}
 					}
@@ -332,7 +277,6 @@
 		}
 
 		$this->availableLanguages[$key] = $available;
-		$this->cache->set($key, $available, 60);
 		return $available;
 	}
 
@@ -361,10 +305,10 @@
 		}
 
 		$languages = $this->findAvailableLanguages($app);
-		return in_array($lang, $languages);
+		return array_search($lang, $languages) !== false;
 	}
 
-	public function getLanguageIterator(?IUser $user = null): ILanguageIterator {
+	public function getLanguageIterator(IUser $user = null): ILanguageIterator {
 		$user = $user ?? $this->userSession->getUser();
 		if ($user === null) {
 			throw new \RuntimeException('Failed to get an IUser instance');
@@ -379,7 +323,7 @@
 	 * @return string
 	 * @since 20.0.0
 	 */
-	public function getUserLanguage(?IUser $user = null): string {
+	public function getUserLanguage(IUser $user = null): string {
 		$language = $this->config->getSystemValue('force_language', false);
 		if ($language !== false) {
 			return $language;
@@ -390,18 +334,9 @@
 			if ($language !== null) {
 				return $language;
 			}
-
-			// Use language from request
-			if ($this->userSession->getUser() instanceof IUser &&
-				$user->getUID() === $this->userSession->getUser()->getUID()) {
-				try {
-					return $this->getLanguageFromRequest();
-				} catch (LanguageNotFoundException $e) {
-				}
-			}
 		}
 
-		return $this->config->getSystemValueString('default_language', 'en');
+		return $this->config->getSystemValue('default_language', 'en');
 	}
 
 	/**
@@ -424,9 +359,11 @@
 	}
 
 	/**
+	 * @param string|null $app
+	 * @return string
 	 * @throws LanguageNotFoundException
 	 */
-	private function getLanguageFromRequest(?string $app = null): string {
+	private function getLanguageFromRequest($app) {
 		$header = $this->request->getHeader('ACCEPT_LANGUAGE');
 		if ($header !== '') {
 			$available = $this->findAvailableLanguages($app);
@@ -436,17 +373,13 @@
 
 			$preferences = preg_split('/,\s*/', strtolower($header));
 			foreach ($preferences as $preference) {
-				[$preferred_language] = explode(';', $preference);
+				list($preferred_language) = explode(';', $preference);
 				$preferred_language = str_replace('-', '_', $preferred_language);
 
-				$preferred_language_parts = explode('_', $preferred_language);
 				foreach ($available as $available_language) {
 					if ($preferred_language === strtolower($available_language)) {
 						return $this->respectDefaultLanguage($app, $available_language);
 					}
-					if (strtolower($available_language) === $preferred_language_parts[0].'_'.end($preferred_language_parts)) {
-						return $available_language;
-					}
 				}
 
 				// Fallback from de_De to de
@@ -464,15 +397,18 @@
 	/**
 	 * if default language is set to de_DE (formal German) this should be
 	 * preferred to 'de' (non-formal German) if possible
+	 *
+	 * @param string|null $app
+	 * @param string $lang
+	 * @return string
 	 */
-	protected function respectDefaultLanguage(?string $app, string $lang): string {
+	protected function respectDefaultLanguage($app, $lang) {
 		$result = $lang;
 		$defaultLanguage = $this->config->getSystemValue('default_language', false);
 
 		// use formal version of german ("Sie" instead of "Du") if the default
 		// language is set to 'de_DE' if possible
-		if (
-			is_string($defaultLanguage) &&
+		if (is_string($defaultLanguage) &&
 			strtolower($lang) === 'de' &&
 			strtolower($defaultLanguage) === 'de_de' &&
 			$this->languageExists($app, 'de_DE')
@@ -492,12 +428,12 @@
 	 */
 	private function isSubDirectory($sub, $parent) {
 		// Check whether $sub contains no ".."
-		if (str_contains($sub, '..')) {
+		if (strpos($sub, '..') !== false) {
 			return false;
 		}
 
 		// Check whether $sub is a subdirectory of $parent
-		if (str_starts_with($sub, $parent)) {
+		if (strpos($sub, $parent) === 0) {
 			return true;
 		}
 
@@ -507,9 +443,13 @@
 	/**
 	 * Get a list of language files that should be loaded
 	 *
+	 * @param string $app
+	 * @param string $lang
 	 * @return string[]
 	 */
-	private function getL10nFilesForApp(string $app, string $lang): array {
+	// FIXME This method is only public, until OC_L10N does not need it anymore,
+	// FIXME This is also the reason, why it is not in the public interface
+	public function getL10nFilesForApp($app, $lang) {
 		$languageFiles = [];
 
 		$i18nDir = $this->findL10nDir($app);
@@ -517,15 +457,15 @@
 
 		if (($this->isSubDirectory($transFile, $this->serverRoot . '/core/l10n/')
 				|| $this->isSubDirectory($transFile, $this->serverRoot . '/lib/l10n/')
-				|| $this->isSubDirectory($transFile, $this->appManager->getAppPath($app) . '/l10n/'))
-			&& file_exists($transFile)
-		) {
+				|| $this->isSubDirectory($transFile, \OC_App::getAppPath($app) . '/l10n/')
+			)
+			&& file_exists($transFile)) {
 			// load the translations file
 			$languageFiles[] = $transFile;
 		}
 
 		// merge with translations from theme
-		$theme = $this->config->getSystemValueString('theme');
+		$theme = $this->config->getSystemValue('theme');
 		if (!empty($theme)) {
 			$transFile = $this->serverRoot . '/themes/' . $theme . substr($transFile, strlen($this->serverRoot));
 			if (file_exists($transFile)) {
@@ -547,42 +487,103 @@
 			if (file_exists($this->serverRoot . '/' . $app . '/l10n/')) {
 				return $this->serverRoot . '/' . $app . '/l10n/';
 			}
-		} elseif ($app) {
-			try {
-				return $this->appManager->getAppPath($app) . '/l10n/';
-			} catch (AppPathNotFoundException) {
-				/* App not found, continue */
-			}
+		} elseif ($app && \OC_App::getAppPath($app) !== false) {
+			// Check if the app is in the app folder
+			return \OC_App::getAppPath($app) . '/l10n/';
 		}
 		return $this->serverRoot . '/core/l10n/';
 	}
 
+
+	/**
+	 * Creates a function from the plural string
+	 *
+	 * Parts of the code is copied from Habari:
+	 * https://github.com/habari/system/blob/master/classes/locale.php
+	 * @param string $string
+	 * @return string
+	 */
+	public function createPluralFunction($string) {
+		if (isset($this->pluralFunctions[$string])) {
+			return $this->pluralFunctions[$string];
+		}
+
+		if (preg_match('/^\s*nplurals\s*=\s*(\d+)\s*;\s*plural=(.*)$/u', $string, $matches)) {
+			// sanitize
+			$nplurals = preg_replace('/[^0-9]/', '', $matches[1]);
+			$plural = preg_replace('#[^n0-9:\(\)\?\|\&=!<>+*/\%-]#', '', $matches[2]);
+
+			$body = str_replace(
+				[ 'plural', 'n', '$n$plurals', ],
+				[ '$plural', '$n', '$nplurals', ],
+				'nplurals='. $nplurals . '; plural=' . $plural
+			);
+
+			// add parents
+			// important since PHP's ternary evaluates from left to right
+			$body .= ';';
+			$res = '';
+			$p = 0;
+			$length = strlen($body);
+			for ($i = 0; $i < $length; $i++) {
+				$ch = $body[$i];
+				switch ($ch) {
+					case '?':
+						$res .= ' ? (';
+						$p++;
+						break;
+					case ':':
+						$res .= ') : (';
+						break;
+					case ';':
+						$res .= str_repeat(')', $p) . ';';
+						$p = 0;
+						break;
+					default:
+						$res .= $ch;
+				}
+			}
+
+			$body = $res . 'return ($plural>=$nplurals?$nplurals-1:$plural);';
+			$function = create_function('$n', $body);
+			$this->pluralFunctions[$string] = $function;
+			return $function;
+		} else {
+			// default: one plural form for all cases but n==1 (english)
+			$function = create_function(
+				'$n',
+				'$nplurals=2;$plural=($n==1?0:1);return ($plural>=$nplurals?$nplurals-1:$plural);'
+			);
+			$this->pluralFunctions[$string] = $function;
+			return $function;
+		}
+	}
+
 	/**
-	 * @inheritDoc
+	 * returns the common language and other languages in an
+	 * associative array
+	 *
+	 * @return array
 	 */
-	public function getLanguages(): array {
+	public function getLanguages() {
 		$forceLanguage = $this->config->getSystemValue('force_language', false);
 		if ($forceLanguage !== false) {
 			$l = $this->get('lib', $forceLanguage);
 			$potentialName = $l->t('__language_name__');
 
 			return [
-				'commonLanguages' => [[
+				'commonlanguages' => [[
 					'code' => $forceLanguage,
 					'name' => $potentialName,
 				]],
-				'otherLanguages' => [],
+				'languages' => [],
 			];
 		}
 
 		$languageCodes = $this->findAvailableLanguages();
-		$reduceToLanguages = $this->config->getSystemValue('reduce_to_languages', []);
-		if (!empty($reduceToLanguages)) {
-			$languageCodes = array_intersect($languageCodes, $reduceToLanguages);
-		}
 
 		$commonLanguages = [];
-		$otherLanguages = [];
+		$languages = [];
 
 		foreach ($languageCodes as $lang) {
 			$l = $this->get('lib', $lang);
@@ -610,14 +611,14 @@
 			if (in_array($lang, self::COMMON_LANGUAGE_CODES)) {
 				$commonLanguages[array_search($lang, self::COMMON_LANGUAGE_CODES)] = $ln;
 			} else {
-				$otherLanguages[] = $ln;
+				$languages[] = $ln;
 			}
 		}
 
 		ksort($commonLanguages);
 
 		// sort now by displayed language not the iso-code
-		usort($otherLanguages, function ($a, $b) {
+		usort($languages, function ($a, $b) {
 			if ($a['code'] === $a['name'] && $b['code'] !== $b['name']) {
 				// If a doesn't have a name, but b does, list b before a
 				return 1;
@@ -632,8 +633,8 @@
 
 		return [
 			// reset indexes
-			'commonLanguages' => array_values($commonLanguages),
-			'otherLanguages' => $otherLanguages
+			'commonlanguages' => array_values($commonLanguages),
+			'languages' => $languages
 		];
 	}
 }
