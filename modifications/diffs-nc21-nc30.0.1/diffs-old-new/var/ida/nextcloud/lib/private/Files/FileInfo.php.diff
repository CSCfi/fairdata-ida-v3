--- /var/ida/nextcloud-new/lib/private/Files/FileInfo.php	2024-11-05 08:30:09.650707048 +0000
+++ /var/ida/nextcloud-old/lib/private/Files/FileInfo.php	2024-02-20 10:11:39.287443301 +0000
@@ -1,26 +1,50 @@
 <?php
-
 /**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-only
+ * @copyright Copyright (c) 2016, ownCloud, Inc.
+ *
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author Julius Härtl <jus@bitgrid.net>
+ * @author Lukas Reschke <lukas@statuscode.ch>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Piotr M <mrow4a@yahoo.com>
+ * @author Robin Appelman <robin@icewind.nl>
+ * @author Robin McCorkell <robin@mccorkell.me.uk>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author tbartenstein <tbartenstein@users.noreply.github.com>
+ * @author Thomas Müller <thomas.mueller@tmit.eu>
+ * @author Vincent Petry <vincent@nextcloud.com>
+ *
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program. If not, see <http://www.gnu.org/licenses/>
+ *
  */
+
 namespace OC\Files;
 
-use OC\Files\Mount\HomeMountPoint;
-use OCA\Files_Sharing\External\Mount;
-use OCA\Files_Sharing\ISharedMountPoint;
 use OCP\Files\Cache\ICacheEntry;
 use OCP\Files\Mount\IMountPoint;
 use OCP\IUser;
 
+class FileInfo implements \OCP\Files\FileInfo, \ArrayAccess {
 /**
- * @template-implements \ArrayAccess<string,mixed>
+	 * @var array $data
  */
-class FileInfo implements \OCP\Files\FileInfo, \ArrayAccess {
-	private array|ICacheEntry $data;
+	private $data;
+
 	/**
-	 * @var string
+	 * @var string $path
 	 */
 	private $path;
 
@@ -30,7 +54,7 @@
 	private $storage;
 
 	/**
-	 * @var string
+	 * @var string $internalPath
 	 */
 	private $internalPath;
 
@@ -39,32 +63,37 @@
 	 */
 	private $mount;
 
-	private ?IUser $owner;
+	/**
+	 * @var IUser
+	 */
+	private $owner;
 
 	/**
 	 * @var string[]
 	 */
-	private array $childEtags = [];
+	private $childEtags = [];
 
 	/**
 	 * @var IMountPoint[]
 	 */
-	private array $subMounts = [];
+	private $subMounts = [];
 
-	private bool $subMountsUsed = false;
+	private $subMountsUsed = false;
 
 	/**
 	 * The size of the file/folder without any sub mount
+	 *
+	 * @var int
 	 */
-	private int|float $rawSize = 0;
+	private $rawSize = 0;
 
 	/**
 	 * @param string|boolean $path
 	 * @param Storage\Storage $storage
 	 * @param string $internalPath
 	 * @param array|ICacheEntry $data
-	 * @param IMountPoint $mount
-	 * @param ?IUser $owner
+	 * @param \OCP\Files\Mount\IMountPoint $mount
+	 * @param \OCP\IUser|null $owner
 	 */
 	public function __construct($path, $storage, $internalPath, $data, $mount, $owner = null) {
 		$this->path = $path;
@@ -73,41 +102,37 @@
 		$this->data = $data;
 		$this->mount = $mount;
 		$this->owner = $owner;
-		if (isset($this->data['unencrypted_size']) && $this->data['unencrypted_size'] !== 0) {
-			$this->rawSize = $this->data['unencrypted_size'];
-		} else {
 			$this->rawSize = $this->data['size'] ?? 0;
 		}
-	}
 
-	public function offsetSet($offset, $value): void {
-		if (is_null($offset)) {
-			throw new \TypeError('Null offset not supported');
-		}
+	public function offsetSet($offset, $value) {
 		$this->data[$offset] = $value;
 	}
 
-	public function offsetExists($offset): bool {
+	public function offsetExists($offset) {
 		return isset($this->data[$offset]);
 	}
 
-	public function offsetUnset($offset): void {
+	public function offsetUnset($offset) {
 		unset($this->data[$offset]);
 	}
 
-	/**
-	 * @return mixed
-	 */
-	#[\ReturnTypeWillChange]
 	public function offsetGet($offset) {
-		return match ($offset) {
-			'type' => $this->getType(),
-			'etag' => $this->getEtag(),
-			'size' => $this->getSize(),
-			'mtime' => $this->getMTime(),
-			'permissions' => $this->getPermissions(),
-			default => $this->data[$offset] ?? null,
-		};
+		if ($offset === 'type') {
+			return $this->getType();
+		} elseif ($offset === 'etag') {
+			return $this->getEtag();
+		} elseif ($offset === 'size') {
+			return $this->getSize();
+		} elseif ($offset === 'mtime') {
+			return $this->getMTime();
+		} elseif ($offset === 'permissions') {
+			return $this->getPermissions();
+		} elseif (isset($this->data[$offset])) {
+			return $this->data[$offset];
+		} else {
+			return null;
+		}
 	}
 
 	/**
@@ -117,6 +142,9 @@
 		return $this->path;
 	}
 
+	/**
+	 * @return \OCP\Files\Storage
+	 */
 	public function getStorage() {
 		return $this->storage;
 	}
@@ -155,9 +183,7 @@
 	 * @return string
 	 */
 	public function getName() {
-		return empty($this->data['name'])
-			? basename($this->getPath())
-			: $this->data['name'];
+		return isset($this->data['name']) ? $this->data['name'] : basename($this->getPath());
 	}
 
 	/**
@@ -174,18 +200,12 @@
 	}
 
 	/**
-	 * @param bool $includeMounts
-	 * @return int|float
+	 * @return int
 	 */
 	public function getSize($includeMounts = true) {
 		if ($includeMounts) {
 			$this->updateEntryfromSubMounts();
-
-			if ($this->isEncrypted() && isset($this->data['unencrypted_size']) && $this->data['unencrypted_size'] > 0) {
-				return $this->data['unencrypted_size'];
-			} else {
 				return isset($this->data['size']) ? 0 + $this->data['size'] : 0;
-			}
 		} else {
 			return $this->rawSize;
 		}
@@ -203,13 +223,15 @@
 	 * @return bool
 	 */
 	public function isEncrypted() {
-		return $this->data['encrypted'] ?? false;
+		return $this->data['encrypted'];
 	}
 
 	/**
-	 * Return the current version used for the HMAC in the encryption app
+	 * Return the currently version used for the HMAC in the encryption app
+	 *
+	 * @return int
 	 */
-	public function getEncryptedVersion(): int {
+	public function getEncryptedVersion() {
 		return isset($this->data['encryptedVersion']) ? (int) $this->data['encryptedVersion'] : 1;
 	}
 
@@ -217,7 +239,14 @@
 	 * @return int
 	 */
 	public function getPermissions() {
-		return (int) $this->data['permissions'];
+		try {
+		    $perms = (int) $this->data['permissions'];
+		}
+		catch (\Exception $e) { ; }
+		if (\OCP\Util::isSharingDisabledForUser() || ($this->isShared() && !\OC\Share\Share::isResharingAllowed())) {
+			$perms = $perms & ~\OCP\Constants::PERMISSION_SHARE;
+		}
+		return $perms;
 	}
 
 	/**
@@ -225,7 +254,7 @@
 	 */
 	public function getType() {
 		if (!isset($this->data['type'])) {
-			$this->data['type'] = ($this->getMimetype() === self::MIMETYPE_FOLDER) ? self::TYPE_FOLDER : self::TYPE_FILE;
+			$this->data['type'] = ($this->getMimetype() === 'httpd/unix-directory') ? self::TYPE_FOLDER : self::TYPE_FILE;
 		}
 		return $this->data['type'];
 	}
@@ -285,12 +314,27 @@
 	 * @return bool
 	 */
 	public function isShared() {
-		return $this->mount instanceof ISharedMountPoint;
+		$sid = $this->getStorage()->getId();
+		if (!is_null($sid)) {
+			$sid = explode(':', $sid);
+			return ($sid[0] === 'shared');
+		}
+
+		return false;
 	}
 
 	public function isMounted() {
-		$isHome = $this->mount instanceof HomeMountPoint;
-		return !$isHome && !$this->isShared();
+		$storage = $this->getStorage();
+		if ($storage->instanceOfStorage('\OCP\Files\IHomeStorage')) {
+			return false;
+		}
+		$sid = $storage->getId();
+		if (!is_null($sid)) {
+			$sid = explode(':', $sid);
+			return ($sid[0] !== 'home' and $sid[0] !== 'shared');
+		}
+
+		return false;
 	}
 
 	/**
@@ -305,7 +349,7 @@
 	/**
 	 * Get the owner of the file
 	 *
-	 * @return ?IUser
+	 * @return \OCP\IUser
 	 */
 	public function getOwner() {
 		return $this->owner;
@@ -318,7 +362,7 @@
 		$this->subMounts = $mounts;
 	}
 
-	private function updateEntryfromSubMounts(): void {
+	private function updateEntryfromSubMounts() {
 		if ($this->subMountsUsed) {
 			return;
 		}
@@ -342,26 +386,14 @@
 	 * @param string $entryPath full path of the child entry
 	 */
 	public function addSubEntry($data, $entryPath) {
-		if (!$data) {
-			return;
-		}
-		$hasUnencryptedSize = isset($data['unencrypted_size']) && $data['unencrypted_size'] > 0;
-		if ($hasUnencryptedSize) {
-			$subSize = $data['unencrypted_size'];
-		} else {
-			$subSize = $data['size'] ?: 0;
-		}
-		$this->data['size'] += $subSize;
-		if ($hasUnencryptedSize) {
-			$this->data['unencrypted_size'] += $subSize;
-		}
+		$this->data['size'] += isset($data['size']) ? $data['size'] : 0;
 		if (isset($data['mtime'])) {
 			$this->data['mtime'] = max($this->data['mtime'], $data['mtime']);
 		}
 		if (isset($data['etag'])) {
 			// prefix the etag with the relative path of the subentry to propagate etag on mount moves
 			$relativeEntryPath = substr($entryPath, strlen($this->getPath()));
-			// attach the permissions to propagate etag on permission changes of submounts
+			// attach the permissions to propagate etag on permision changes of submounts
 			$permissions = isset($data['permissions']) ? $data['permissions'] : 0;
 			$this->childEtags[] = $relativeEntryPath . '/' . $data['etag'] . $permissions;
 		}
@@ -385,16 +417,4 @@
 	public function getUploadTime(): int {
 		return (int) $this->data['upload_time'];
 	}
-
-	public function getParentId(): int {
-		return $this->data['parent'] ?? -1;
-	}
-
-	/**
-	 * @inheritDoc
-	 * @return array<string, int|string|bool|float|string[]|int[]>
-	 */
-	public function getMetadata(): array {
-		return $this->data['metadata'] ?? [];
-	}
 }
