--- /var/ida/nextcloud-new/lib/base.php	2024-11-05 08:30:09.591706844 +0000
+++ /var/ida/nextcloud-old/lib/base.php	2024-02-20 10:11:39.219443070 +0000
@@ -1,26 +1,75 @@
 <?php
-
-declare(strict_types=1);
 /**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2013-2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-only
+ * @copyright Copyright (c) 2016, ownCloud, Inc.
+ *
+ * @author Adam Williamson <awilliam@redhat.com>
+ * @author Andreas Fischer <bantu@owncloud.com>
+ * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
+ * @author Bart Visscher <bartv@thisnet.nl>
+ * @author Bernhard Posselt <dev@bernhard-posselt.com>
+ * @author Bjoern Schiessle <bjoern@schiessle.org>
+ * @author Björn Schießle <bjoern@schiessle.org>
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Damjan Georgievski <gdamjan@gmail.com>
+ * @author Daniel Kesselberg <mail@danielkesselberg.de>
+ * @author davidgumberg <davidnoizgumberg@gmail.com>
+ * @author Eric Masseran <rico.masseran@gmail.com>
+ * @author Florin Peter <github@florin-peter.de>
+ * @author Greta Doci <gretadoci@gmail.com>
+ * @author Jakob Sack <mail@jakobsack.de>
+ * @author jaltek <jaltek@mailbox.org>
+ * @author Jan-Christoph Borchardt <hey@jancborchardt.net>
+ * @author Joachim Sokolowski <github@sokolowski.org>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
+ * @author Jörn Friedrich Dreyer <jfd@butonic.de>
+ * @author Jose Quinteiro <github@quinteiro.org>
+ * @author Juan Pablo Villafáñez <jvillafanez@solidgear.es>
+ * @author Julius Härtl <jus@bitgrid.net>
+ * @author Ko- <k.stoffelen@cs.ru.nl>
+ * @author Lukas Reschke <lukas@statuscode.ch>
+ * @author MartB <mart.b@outlook.de>
+ * @author Michael Gapczynski <GapczynskiM@gmail.com>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Owen Winkler <a_github@midnightcircus.com>
+ * @author Phil Davis <phil.davis@inf.org>
+ * @author Ramiro Aparicio <rapariciog@gmail.com>
+ * @author Robin Appelman <robin@icewind.nl>
+ * @author Robin McCorkell <robin@mccorkell.me.uk>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author Sebastian Wessalowski <sebastian@wessalowski.org>
+ * @author Stefan Weil <sw@weilnetz.de>
+ * @author Thomas Müller <thomas.mueller@tmit.eu>
+ * @author Thomas Tanghus <thomas@tanghus.net>
+ * @author Tobia De Koninck <tobia@ledfan.be>
+ * @author Vincent Petry <vincent@nextcloud.com>
+ * @author Volkan Gezer <volkangezer@gmail.com>
+ *
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program. If not, see <http://www.gnu.org/licenses/>
+ *
  */
-use OC\Encryption\HookManager;
-use OC\Share20\Hooks;
+
 use OCP\EventDispatcher\IEventDispatcher;
 use OCP\Group\Events\UserRemovedEvent;
 use OCP\ILogger;
-use OCP\IRequest;
-use OCP\IURLGenerator;
-use OCP\IUserSession;
-use OCP\Security\Bruteforce\IThrottler;
-use OCP\Server;
 use OCP\Share;
-use OCP\User\Events\UserChangedEvent;
-use Psr\Log\LoggerInterface;
-use Symfony\Component\Routing\Exception\MethodNotAllowedException;
-use function OCP\Log\logger;
+use OC\Encryption\HookManager;
+use OC\Files\Filesystem;
+use OC\Share20\Hooks;
+use OCP\Util;
+use \Firebase\JWT\JWT;
 
 require_once 'public/Constants.php';
 
@@ -33,50 +82,63 @@
 	/**
 	 * Associative array for autoloading. classname => filename
 	 */
-	public static array $CLASSPATH = [];
+	public static $CLASSPATH = [];
 	/**
 	 * The installation path for Nextcloud  on the server (e.g. /srv/http/nextcloud)
 	 */
-	public static string $SERVERROOT = '';
+	public static $SERVERROOT = '';
 	/**
 	 * the current request path relative to the Nextcloud root (e.g. files/index.php)
 	 */
-	private static string $SUBURI = '';
+	private static $SUBURI = '';
 	/**
-	 * the Nextcloud root path for http requests (e.g. /nextcloud)
+	 * the Nextcloud root path for http requests (e.g. nextcloud/)
 	 */
-	public static string $WEBROOT = '';
+	public static $WEBROOT = '';
 	/**
 	 * The installation path array of the apps folder on the server (e.g. /srv/http/nextcloud) 'path' and
 	 * web path in 'url'
 	 */
-	public static array $APPSROOTS = [];
+	public static $APPSROOTS = [];
 
-	public static string $configDir;
+	/**
+	 * @var string
+	 */
+	public static $configDir;
 
 	/**
 	 * requested app
 	 */
-	public static string $REQUESTEDAPP = '';
+	public static $REQUESTEDAPP = '';
 
 	/**
 	 * check if Nextcloud runs in cli mode
 	 */
-	public static bool $CLI = false;
+	public static $CLI = false;
 
-	public static \OC\Autoloader $loader;
+	/**
+	 * @var \OC\Autoloader $loader
+	 */
+	public static $loader = null;
 
-	public static \Composer\Autoload\ClassLoader $composerAutoloader;
+	/** @var \Composer\Autoload\ClassLoader $composerAutoloader */
+	public static $composerAutoloader = null;
 
-	public static \OC\Server $server;
+	/**
+	 * @var \OC\Server
+	 */
+	public static $server = null;
 
-	private static \OC\Config $config;
+	/**
+	 * @var \OC\Config
+	 */
+	private static $config = null;
 
 	/**
 	 * @throws \RuntimeException when the 3rdparty directory is missing or
 	 * the app path list is empty or contains an invalid path
 	 */
-	public static function initPaths(): void {
+	public static function initPaths() {
 		if (defined('PHPUNIT_CONFIG_DIR')) {
 			self::$configDir = OC::$SERVERROOT . '/' . PHPUNIT_CONFIG_DIR . '/';
 		} elseif (defined('PHPUNIT_RUN') and PHPUNIT_RUN and is_dir(OC::$SERVERROOT . '/tests/config/')) {
@@ -88,25 +150,18 @@
 		}
 		self::$config = new \OC\Config(self::$configDir);
 
-		OC::$SUBURI = str_replace("\\", "/", substr(realpath($_SERVER["SCRIPT_FILENAME"] ?? ''), strlen(OC::$SERVERROOT)));
+		OC::$SUBURI = str_replace("\\", "/", substr(realpath($_SERVER["SCRIPT_FILENAME"]), strlen(OC::$SERVERROOT)));
 		/**
 		 * FIXME: The following lines are required because we can't yet instantiate
-		 *        Server::get(\OCP\IRequest::class) since \OC::$server does not yet exist.
+		 *        \OC::$server->getRequest() since \OC::$server does not yet exist.
 		 */
 		$params = [
 			'server' => [
-				'SCRIPT_NAME' => $_SERVER['SCRIPT_NAME'] ?? null,
-				'SCRIPT_FILENAME' => $_SERVER['SCRIPT_FILENAME'] ?? null,
+				'SCRIPT_NAME' => $_SERVER['SCRIPT_NAME'],
+				'SCRIPT_FILENAME' => $_SERVER['SCRIPT_FILENAME'],
 			],
 		];
-		if (isset($_SERVER['REMOTE_ADDR'])) {
-			$params['server']['REMOTE_ADDR'] = $_SERVER['REMOTE_ADDR'];
-		}
-		$fakeRequest = new \OC\AppFramework\Http\Request(
-			$params,
-			new \OC\AppFramework\Http\RequestId($_SERVER['UNIQUE_ID'] ?? '', new \OC\Security\SecureRandom()),
-			new \OC\AllConfig(new \OC\SystemConfig(self::$config))
-		);
+		$fakeRequest = new \OC\AppFramework\Http\Request($params, new \OC\Security\SecureRandom(), new \OC\AllConfig(new \OC\SystemConfig(self::$config)));
 		$scriptName = $fakeRequest->getScriptName();
 		if (substr($scriptName, -1) == '/') {
 			$scriptName .= 'index.php';
@@ -179,8 +234,8 @@
 		);
 	}
 
-	public static function checkConfig(): void {
-		$l = Server::get(\OCP\L10N\IFactory::class)->get('lib');
+	public static function checkConfig() {
+		$l = \OC::$server->getL10N('lib');
 
 		// Create config if it does not already exist
 		$configFilePath = self::$configDir .'/config.php';
@@ -192,28 +247,28 @@
 		$configFileWritable = is_writable($configFilePath);
 		if (!$configFileWritable && !OC_Helper::isReadOnlyConfigEnabled()
 			|| !$configFileWritable && \OCP\Util::needUpgrade()) {
-			$urlGenerator = Server::get(IURLGenerator::class);
+			$urlGenerator = \OC::$server->getURLGenerator();
 
 			if (self::$CLI) {
 				echo $l->t('Cannot write into "config" directory!')."\n";
-				echo $l->t('This can usually be fixed by giving the web server write access to the config directory.')."\n";
+				echo $l->t('This can usually be fixed by giving the webserver write access to the config directory')."\n";
 				echo "\n";
-				echo $l->t('But, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it.')."\n";
+				echo $l->t('Or, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it.')."\n";
 				echo $l->t('See %s', [ $urlGenerator->linkToDocs('admin-config') ])."\n";
 				exit;
 			} else {
 				OC_Template::printErrorPage(
 					$l->t('Cannot write into "config" directory!'),
-					$l->t('This can usually be fixed by giving the web server write access to the config directory.') . ' '
-					. $l->t('But, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it.') . ' '
-					. $l->t('See %s', [ $urlGenerator->linkToDocs('admin-config') ]),
+					$l->t('This can usually be fixed by giving the webserver write access to the config directory.') . '. '
+					. $l->t('Or, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it. See %s',
+					[ $urlGenerator->linkToDocs('admin-config') ]),
 					503
 				);
 			}
 		}
 	}
 
-	public static function checkInstalled(\OC\SystemConfig $systemConfig): void {
+	public static function checkInstalled(\OC\SystemConfig $systemConfig) {
 		if (defined('OC_CONSOLE')) {
 			return;
 		}
@@ -229,18 +284,17 @@
 		}
 	}
 
-	public static function checkMaintenanceMode(\OC\SystemConfig $systemConfig): void {
+	public static function checkMaintenanceMode(\OC\SystemConfig $systemConfig) {
 		// Allow ajax update script to execute without being stopped
 		if (((bool) $systemConfig->getValue('maintenance', false)) && OC::$SUBURI != '/core/ajax/update.php') {
 			// send http status 503
 			http_response_code(503);
-			header('X-Nextcloud-Maintenance-Mode: 1');
 			header('Retry-After: 120');
 
 			// render error page
 			$template = new OC_Template('', 'update.user', 'guest');
-			\OCP\Util::addScript('core', 'maintenance');
-			\OCP\Util::addStyle('core', 'guest');
+			OC_Util::addScript('dist/maintenance');
+			OC_Util::addStyle('core', 'guest');
 			$template->printPage();
 			die();
 		}
@@ -248,30 +302,31 @@
 
 	/**
 	 * Prints the upgrade page
+	 *
+	 * @param \OC\SystemConfig $systemConfig
 	 */
-	private static function printUpgradePage(\OC\SystemConfig $systemConfig): void {
-		$cliUpgradeLink = $systemConfig->getValue('upgrade.cli-upgrade-link', '');
+	private static function printUpgradePage(\OC\SystemConfig $systemConfig) {
 		$disableWebUpdater = $systemConfig->getValue('upgrade.disable-web', false);
 		$tooBig = false;
 		if (!$disableWebUpdater) {
-			$apps = Server::get(\OCP\App\IAppManager::class);
+			$apps = \OC::$server->getAppManager();
 			if ($apps->isInstalled('user_ldap')) {
-				$qb = Server::get(\OCP\IDBConnection::class)->getQueryBuilder();
+				$qb = \OC::$server->getDatabaseConnection()->getQueryBuilder();
 
 				$result = $qb->select($qb->func()->count('*', 'user_count'))
 					->from('ldap_user_mapping')
-					->executeQuery();
+					->execute();
 				$row = $result->fetch();
 				$result->closeCursor();
 
 				$tooBig = ($row['user_count'] > 50);
 			}
 			if (!$tooBig && $apps->isInstalled('user_saml')) {
-				$qb = Server::get(\OCP\IDBConnection::class)->getQueryBuilder();
+				$qb = \OC::$server->getDatabaseConnection()->getQueryBuilder();
 
 				$result = $qb->select($qb->func()->count('*', 'user_count'))
 					->from('user_saml_users')
-					->executeQuery();
+					->execute();
 				$row = $result->fetch();
 				$result->closeCursor();
 
@@ -279,7 +334,7 @@
 			}
 			if (!$tooBig) {
 				// count users
-				$stats = Server::get(\OCP\IUserManager::class)->countUsers();
+				$stats = \OC::$server->getUserManager()->countUsers();
 				$totalUsers = array_sum($stats);
 				$tooBig = ($totalUsers > 50);
 			}
@@ -297,7 +352,6 @@
 			$template->assign('productName', 'nextcloud'); // for now
 			$template->assign('version', OC_Util::getVersionString());
 			$template->assign('tooBig', $tooBig);
-			$template->assign('cliUpgradeLink', $cliUpgradeLink);
 
 			$template->printPage();
 			die();
@@ -312,13 +366,10 @@
 
 		$oldTheme = $systemConfig->getValue('theme');
 		$systemConfig->setValue('theme', '');
-		\OCP\Util::addScript('core', 'common');
-		\OCP\Util::addScript('core', 'main');
-		\OCP\Util::addTranslations('core');
-		\OCP\Util::addScript('core', 'update');
+		OC_Util::addScript('update');
 
 		/** @var \OC\App\AppManager $appManager */
-		$appManager = Server::get(\OCP\App\IAppManager::class);
+		$appManager = \OC::$server->getAppManager();
 
 		$tmpl = new OC_Template('', 'update.admin', 'guest');
 		$tmpl->assign('version', OC_Util::getVersionString());
@@ -328,52 +379,29 @@
 		$ocVersion = \OCP\Util::getVersion();
 		$ocVersion = implode('.', $ocVersion);
 		$incompatibleApps = $appManager->getIncompatibleApps($ocVersion);
-		$incompatibleOverwrites = $systemConfig->getValue('app_install_overwrite', []);
 		$incompatibleShippedApps = [];
-		$incompatibleDisabledApps = [];
 		foreach ($incompatibleApps as $appInfo) {
 			if ($appManager->isShipped($appInfo['id'])) {
 				$incompatibleShippedApps[] = $appInfo['name'] . ' (' . $appInfo['id'] . ')';
 			}
-			if (!in_array($appInfo['id'], $incompatibleOverwrites)) {
-				$incompatibleDisabledApps[] = $appInfo;
-			}
 		}
 
 		if (!empty($incompatibleShippedApps)) {
-			$l = Server::get(\OCP\L10N\IFactory::class)->get('core');
-			$hint = $l->t('Application %1$s is not present or has a non-compatible version with this server. Please check the apps directory.', [implode(', ', $incompatibleShippedApps)]);
-			throw new \OCP\HintException('Application ' . implode(', ', $incompatibleShippedApps) . ' is not present or has a non-compatible version with this server. Please check the apps directory.', $hint);
+			$l = \OC::$server->getL10N('core');
+			$hint = $l->t('The files of the app %1$s were not replaced correctly. Make sure it is a version compatible with the server.', [implode(', ', $incompatibleShippedApps)]);
+			throw new \OC\HintException('The files of the app ' . implode(', ', $incompatibleShippedApps) . ' were not replaced correctly. Make sure it is a version compatible with the server.', $hint);
 		}
 
 		$tmpl->assign('appsToUpgrade', $appManager->getAppsNeedingUpgrade($ocVersion));
-		$tmpl->assign('incompatibleAppsList', $incompatibleDisabledApps);
-		try {
-			$defaults = new \OC_Defaults();
-			$tmpl->assign('productName', $defaults->getName());
-		} catch (Throwable $error) {
-			$tmpl->assign('productName', 'Nextcloud');
-		}
+		$tmpl->assign('incompatibleAppsList', $incompatibleApps);
+		$tmpl->assign('productName', 'Nextcloud'); // for now
 		$tmpl->assign('oldTheme', $oldTheme);
 		$tmpl->printPage();
 	}
 
-	public static function initSession(): void {
-		$request = Server::get(IRequest::class);
-
-		// TODO: Temporary disabled again to solve issues with CalDAV/CardDAV clients like DAVx5 that use cookies
-		// TODO: See https://github.com/nextcloud/server/issues/37277#issuecomment-1476366147 and the other comments
-		// TODO: for further information.
-		// $isDavRequest = strpos($request->getRequestUri(), '/remote.php/dav') === 0 || strpos($request->getRequestUri(), '/remote.php/webdav') === 0;
-		// if ($request->getHeader('Authorization') !== '' && is_null($request->getCookie('cookie_test')) && $isDavRequest && !isset($_COOKIE['nc_session_id'])) {
-		// setcookie('cookie_test', 'test', time() + 3600);
-		// // Do not initialize the session if a request is authenticated directly
-		// // unless there is a session cookie already sent along
-		// return;
-		// }
-
-		if ($request->getServerProtocol() === 'https') {
-			ini_set('session.cookie_secure', 'true');
+	public static function initSession() {
+		if (self::$server->getRequest()->getServerProtocol() === 'https') {
+			ini_set('session.cookie_secure', true);
 		}
 
 		// prevents javascript from accessing php session cookies
@@ -387,30 +415,21 @@
 		$sessionName = OC_Util::getInstanceId();
 
 		try {
-			$logger = null;
-			if (Server::get(\OC\SystemConfig::class)->getValue('installed', false)) {
-				$logger = logger('core');
-			}
-
 			// set the session name to the instance id - which is unique
-			$session = new \OC\Session\Internal(
-				$sessionName,
-				$logger,
-			);
+			$session = new \OC\Session\Internal($sessionName);
 
-			$cryptoWrapper = Server::get(\OC\Session\CryptoWrapper::class);
+			$cryptoWrapper = \OC::$server->getSessionCryptoWrapper();
 			$session = $cryptoWrapper->wrapSession($session);
 			self::$server->setSession($session);
 
 			// if session can't be started break with http 500 error
 		} catch (Exception $e) {
-			Server::get(LoggerInterface::class)->error($e->getMessage(), ['app' => 'base','exception' => $e]);
+			\OC::$server->getLogger()->logException($e, ['app' => 'base']);
 			//show the user a detailed error page
 			OC_Template::printExceptionErrorPage($e, 500);
 			die();
 		}
 
-		//try to set the session lifetime
 		$sessionLifeTime = self::getSessionLifeTime();
 
 		// session timeout
@@ -418,30 +437,23 @@
 			if (isset($_COOKIE[session_name()])) {
 				setcookie(session_name(), '', -1, self::$WEBROOT ? : '/');
 			}
-			Server::get(IUserSession::class)->logout();
+			\OC::$server->getUserSession()->logout();
 		}
 
-		if (!self::hasSessionRelaxedExpiry()) {
 			$session->set('LAST_ACTIVITY', time());
 		}
-		$session->close();
-	}
-
-	private static function getSessionLifeTime(): int {
-		return Server::get(\OC\AllConfig::class)->getSystemValueInt('session_lifetime', 60 * 60 * 24);
-	}
 
 	/**
-	 * @return bool true if the session expiry should only be done by gc instead of an explicit timeout
+	 * @return string
 	 */
-	public static function hasSessionRelaxedExpiry(): bool {
-		return Server::get(\OC\AllConfig::class)->getSystemValueBool('session_relaxed_expiry', false);
+	private static function getSessionLifeTime() {
+		return \OC::$server->getConfig()->getSystemValue('session_lifetime', 60 * 60 * 24);
 	}
 
 	/**
 	 * Try to set some values to the required Nextcloud default
 	 */
-	public static function setRequiredIniValues(): void {
+	public static function setRequiredIniValues() {
 		@ini_set('default_charset', 'UTF-8');
 		@ini_set('gd.jpeg_ignore_warning', '1');
 	}
@@ -449,7 +461,7 @@
 	/**
 	 * Send the same site cookies
 	 */
-	private static function sendSameSiteCookies(): void {
+	private static function sendSameSiteCookies() {
 		$cookieParams = session_get_cookie_params();
 		$secureCookie = ($cookieParams['secure'] === true) ? 'secure; ' : '';
 		$policies = [
@@ -486,8 +498,8 @@
 	 * We use an additional cookie since we want to protect logout CSRF and
 	 * also we can't directly interfere with PHP's session mechanism.
 	 */
-	private static function performSameSiteCookieProtection(\OCP\IConfig $config): void {
-		$request = Server::get(IRequest::class);
+	private static function performSameSiteCookieProtection(\OCP\IConfig $config) {
+		$request = \OC::$server->getRequest();
 
 		// Some user agents are notorious and don't really properly follow HTTP
 		// specifications. For those, have an automated opt-out. Since the protection
@@ -521,14 +533,11 @@
 
 			// All other endpoints require the lax and the strict cookie
 			if (!$request->passesStrictCookieCheck()) {
-				logger('core')->warning('Request does not pass strict cookie check');
 				self::sendSameSiteCookies();
 				// Debug mode gets access to the resources without strict cookie
 				// due to the fact that the SabreDAV browser also lives there.
-				if (!$config->getSystemValueBool('debug', false)) {
-					http_response_code(\OCP\AppFramework\Http::STATUS_PRECONDITION_FAILED);
-					header('Content-Type: application/json');
-					echo json_encode(['error' => 'Strict Cookie has not been found in request']);
+				if (!$config->getSystemValue('debug', false)) {
+					http_response_code(\OCP\AppFramework\Http::STATUS_SERVICE_UNAVAILABLE);
 					exit();
 				}
 			}
@@ -537,12 +546,7 @@
 		}
 	}
 
-	public static function init(): void {
-		// prevent any XML processing from loading external entities
-		libxml_set_external_entity_loader(static function () {
-			return null;
-		});
-
+	public static function init() {
 		// calculate the root directories
 		OC::$SERVERROOT = str_replace("\\", '/', substr(__DIR__, 0, -4));
 
@@ -560,10 +564,8 @@
 
 		self::$CLI = (php_sapi_name() == 'cli');
 
-		// Add default composer PSR-4 autoloader, ensure apcu to be disabled
+		// Add default composer PSR-4 autoloader
 		self::$composerAutoloader = require_once OC::$SERVERROOT . '/lib/composer/autoload.php';
-		self::$composerAutoloader->setApcuPrefix(null);
-
 
 		try {
 			self::initPaths();
@@ -586,12 +588,7 @@
 		// setup the basic server
 		self::$server = new \OC\Server(\OC::$WEBROOT, self::$config);
 		self::$server->boot();
-
-		if (self::$CLI && in_array('--'.\OCP\Console\ReservedOptions::DEBUG_LOG, $_SERVER['argv'])) {
-			\OC\Core\Listener\BeforeMessageLoggedEventListener::setup();
-		}
-
-		$eventLogger = Server::get(\OCP\Diagnostics\IEventLogger::class);
+		$eventLogger = \OC::$server->getEventLogger();
 		$eventLogger->log('autoloader', 'Autoloader', $loaderStart, $loaderEnd);
 		$eventLogger->start('boot', 'Initialize');
 
@@ -608,52 +605,39 @@
 			throw new \RuntimeException('Could not set timezone to UTC');
 		}
 
-
 		//try to configure php to enable big file uploads.
 		//this doesn´t work always depending on the webserver and php configuration.
-		//Let´s try to overwrite some defaults if they are smaller than 1 hour
-
-		if (intval(@ini_get('max_execution_time') ?: 0) < 3600) {
-			@ini_set('max_execution_time', strval(3600));
-		}
+		//Let´s try to overwrite some defaults anyway
 
-		if (intval(@ini_get('max_input_time') ?: 0) < 3600) {
-			@ini_set('max_input_time', strval(3600));
-		}
-
-		//try to set the maximum execution time to the largest time limit we have
+		//try to set execution time limits to 30 days
 		if (strpos(@ini_get('disable_functions'), 'set_time_limit') === false) {
-			@set_time_limit(max(intval(@ini_get('max_execution_time')), intval(@ini_get('max_input_time'))));
+			@set_time_limit(2592000);
 		}
+		@ini_set('max_execution_time',2592000);
+		@ini_set('max_input_time', 2592000);
+		
+		//try to set the maximum filesize to 10TB and upload of up to 1 million files
+		@ini_set('upload_max_filesize', '10000G');
+		@ini_set('post_max_size', '10000G');
+		@ini_set('file_uploads', '1000000');
 
 		self::setRequiredIniValues();
 		self::handleAuthHeaders();
-		$systemConfig = Server::get(\OC\SystemConfig::class);
+		$systemConfig = \OC::$server->get(\OC\SystemConfig::class);
 		self::registerAutoloaderCache($systemConfig);
 
 		// initialize intl fallback if necessary
 		OC_Util::isSetLocaleWorking();
 
-		$config = Server::get(\OCP\IConfig::class);
+		$config = \OC::$server->get(\OCP\IConfig::class);
 		if (!defined('PHPUNIT_RUN')) {
-			$errorHandler = new OC\Log\ErrorHandler(
-				\OCP\Server::get(\Psr\Log\LoggerInterface::class),
-			);
-			$exceptionHandler = [$errorHandler, 'onException'];
-			if ($config->getSystemValueBool('debug', false)) {
-				set_error_handler([$errorHandler, 'onAll'], E_ALL);
-				if (\OC::$CLI) {
-					$exceptionHandler = ['OC_Template', 'printExceptionErrorPage'];
-				}
-			} else {
-				set_error_handler([$errorHandler, 'onError']);
-			}
-			register_shutdown_function([$errorHandler, 'onShutdown']);
-			set_exception_handler($exceptionHandler);
+			OC\Log\ErrorHandler::setLogger(\OC::$server->getLogger());
+			$debug = $config->getSystemValue('debug', false);
+			OC\Log\ErrorHandler::register($debug);
 		}
 
 		/** @var \OC\AppFramework\Bootstrap\Coordinator $bootstrapCoordinator */
-		$bootstrapCoordinator = Server::get(\OC\AppFramework\Bootstrap\Coordinator::class);
+		$bootstrapCoordinator = \OC::$server->query(\OC\AppFramework\Bootstrap\Coordinator::class);
 		$bootstrapCoordinator->runInitialRegistration();
 
 		$eventLogger->start('init_session', 'Initialize session');
@@ -701,10 +685,13 @@
 					echo('Writing to database failed');
 				}
 				exit(1);
-			} elseif (self::$CLI && $config->getSystemValueBool('installed', false)) {
+			} elseif (self::$CLI && $config->getSystemValue('installed', false)) {
 				$config->deleteAppValue('core', 'cronErrors');
 			}
 		}
+		//try to set the session lifetime
+		$sessionLifeTime = self::getSessionLifeTime();
+		@ini_set('gc_maxlifetime', (string)$sessionLifeTime);
 
 		// User and Groups
 		if (!$systemConfig->getValue("installed", false)) {
@@ -712,7 +699,7 @@
 		}
 
 		OC_User::useBackend(new \OC\User\Database());
-		Server::get(\OCP\IGroupManager::class)->addBackend(new \OC\Group\Database());
+		\OC::$server->getGroupManager()->addBackend(new \OC\Group\Database());
 
 		// Subscribe to the hook
 		\OCP\Util::connectHook(
@@ -731,30 +718,27 @@
 		}
 
 		self::registerCleanupHooks($systemConfig);
+		self::registerFilesystemHooks();
 		self::registerShareHooks($systemConfig);
 		self::registerEncryptionWrapperAndHooks();
 		self::registerAccountHooks();
 		self::registerResourceCollectionHooks();
-		self::registerFileReferenceEventListener();
-		self::registerRenderReferenceEventListener();
 		self::registerAppRestrictionsHooks();
 
 		// Make sure that the application class is not loaded before the database is setup
 		if ($systemConfig->getValue("installed", false)) {
 			OC_App::loadApp('settings');
-			/* Build core application to make sure that listeners are registered */
-			Server::get(\OC\Core\Application::class);
 		}
 
 		//make sure temporary files are cleaned up
-		$tmpManager = Server::get(\OCP\ITempManager::class);
+		$tmpManager = \OC::$server->getTempManager();
 		register_shutdown_function([$tmpManager, 'clean']);
-		$lockProvider = Server::get(\OCP\Lock\ILockingProvider::class);
+		$lockProvider = \OC::$server->getLockingProvider();
 		register_shutdown_function([$lockProvider, 'releaseAll']);
 
 		// Check whether the sample configuration has been copied
 		if ($systemConfig->getValue('copied_sample_config', false)) {
-			$l = Server::get(\OCP\L10N\IFactory::class)->get('lib');
+			$l = \OC::$server->getL10N('lib');
 			OC_Template::printErrorPage(
 				$l->t('Sample configuration detected'),
 				$l->t('It has been detected that the sample configuration has been copied. This can break your installation and is unsupported. Please read the documentation before performing changes on config.php'),
@@ -763,19 +747,19 @@
 			return;
 		}
 
-		$request = Server::get(IRequest::class);
+		$request = \OC::$server->getRequest();
 		$host = $request->getInsecureServerHost();
 		/**
 		 * if the host passed in headers isn't trusted
 		 * FIXME: Should not be in here at all :see_no_evil:
 		 */
 		if (!OC::$CLI
-			&& !Server::get(\OC\Security\TrustedDomainHelper::class)->isTrustedDomain($host)
-			&& $config->getSystemValueBool('installed', false)
+			&& !\OC::$server->getTrustedDomainHelper()->isTrustedDomain($host)
+			&& $config->getSystemValue('installed', false)
 		) {
 			// Allow access to CSS resources
 			$isScssRequest = false;
-			if (strpos($request->getPathInfo() ?: '', '/css/') === 0) {
+			if (strpos($request->getPathInfo(), '/css/') === 0) {
 				$isScssRequest = true;
 			}
 
@@ -788,7 +772,8 @@
 
 			if (!$isScssRequest) {
 				http_response_code(400);
-				Server::get(LoggerInterface::class)->info(
+
+				\OC::$server->getLogger()->info(
 					'Trusted domain error. "{remoteAddress}" tried to access using "{host}" as host.',
 					[
 						'app' => 'core',
@@ -798,35 +783,30 @@
 				);
 
 				$tmpl = new OCP\Template('core', 'untrustedDomain', 'guest');
-				$tmpl->assign('docUrl', Server::get(IURLGenerator::class)->linkToDocs('admin-trusted-domains'));
+				$tmpl->assign('docUrl', \OC::$server->getURLGenerator()->linkToDocs('admin-trusted-domains'));
 				$tmpl->printPage();
 
 				exit();
 			}
 		}
 		$eventLogger->end('boot');
-		$eventLogger->log('init', 'OC::init', $loaderStart, microtime(true));
-		$eventLogger->start('runtime', 'Runtime');
-		$eventLogger->start('request', 'Full request after boot');
-		register_shutdown_function(function () use ($eventLogger) {
-			$eventLogger->end('request');
-		});
 	}
 
 	/**
 	 * register hooks for the cleanup of cache and bruteforce protection
 	 */
-	public static function registerCleanupHooks(\OC\SystemConfig $systemConfig): void {
+	public static function registerCleanupHooks(\OC\SystemConfig $systemConfig) {
 		//don't try to do this before we are properly setup
 		if ($systemConfig->getValue('installed', false) && !\OCP\Util::needUpgrade()) {
+
 			// NOTE: This will be replaced to use OCP
-			$userSession = Server::get(\OC\User\Session::class);
+			$userSession = self::$server->getUserSession();
 			$userSession->listen('\OC\User', 'postLogin', function () use ($userSession) {
 				if (!defined('PHPUNIT_RUN') && $userSession->isLoggedIn()) {
 					// reset brute force delay for this IP address and username
-					$uid = $userSession->getUser()->getUID();
-					$request = Server::get(IRequest::class);
-					$throttler = Server::get(IThrottler::class);
+					$uid = \OC::$server->getUserSession()->getUser()->getUID();
+					$request = \OC::$server->getRequest();
+					$throttler = \OC::$server->getBruteForceThrottler();
 					$throttler->resetDelay($request->getRemoteAddress(), 'login', ['user' => $uid]);
 				}
 
@@ -841,17 +821,18 @@
 				} catch (\Exception $e) {
 					// a GC exception should not prevent users from using OC,
 					// so log the exception
-					Server::get(LoggerInterface::class)->warning('Exception when running cache gc.', [
+					\OC::$server->getLogger()->logException($e, [
+						'message' => 'Exception when running cache gc.',
+						'level' => ILogger::WARN,
 						'app' => 'core',
-						'exception' => $e,
 					]);
 				}
 			});
 		}
 	}
 
-	private static function registerEncryptionWrapperAndHooks(): void {
-		$manager = Server::get(\OCP\Encryption\IManager::class);
+	private static function registerEncryptionWrapperAndHooks() {
+		$manager = self::$server->getEncryptionManager();
 		\OCP\Util::connectHook('OC_Filesystem', 'preSetup', $manager, 'setupStorage');
 
 		$enabled = $manager->isEnabled();
@@ -863,17 +844,16 @@
 		}
 	}
 
-	private static function registerAccountHooks(): void {
-		/** @var IEventDispatcher $dispatcher */
-		$dispatcher = Server::get(IEventDispatcher::class);
-		$dispatcher->addServiceListener(UserChangedEvent::class, \OC\Accounts\Hooks::class);
+	private static function registerAccountHooks() {
+		$hookHandler = \OC::$server->get(\OC\Accounts\Hooks::class);
+		\OCP\Util::connectHook('OC_User', 'changeUser', $hookHandler, 'changeUserHook');
 	}
 
-	private static function registerAppRestrictionsHooks(): void {
+	private static function registerAppRestrictionsHooks() {
 		/** @var \OC\Group\Manager $groupManager */
-		$groupManager = Server::get(\OCP\IGroupManager::class);
+		$groupManager = self::$server->query(\OCP\IGroupManager::class);
 		$groupManager->listen('\OC\Group', 'postDelete', function (\OCP\IGroup $group) {
-			$appManager = Server::get(\OCP\App\IAppManager::class);
+			$appManager = self::$server->getAppManager();
 			$apps = $appManager->getEnabledAppsForGroup($group);
 			foreach ($apps as $appId) {
 				$restrictions = $appManager->getAppRestriction($appId);
@@ -892,33 +872,34 @@
 		});
 	}
 
-	private static function registerResourceCollectionHooks(): void {
-		\OC\Collaboration\Resources\Listener::register(Server::get(IEventDispatcher::class));
+	private static function registerResourceCollectionHooks() {
+		\OC\Collaboration\Resources\Listener::register(\OC::$server->getEventDispatcher());
 	}
 
-	private static function registerFileReferenceEventListener(): void {
-		\OC\Collaboration\Reference\File\FileReferenceEventListener::register(Server::get(IEventDispatcher::class));
-	}
-
-	private static function registerRenderReferenceEventListener() {
-		\OC\Collaboration\Reference\RenderReferenceEventListener::register(Server::get(IEventDispatcher::class));
+	/**
+	 * register hooks for the filesystem
+	 */
+	public static function registerFilesystemHooks() {
+		// Check for blacklisted files
+		OC_Hook::connect('OC_Filesystem', 'write', Filesystem::class, 'isBlacklisted');
+		OC_Hook::connect('OC_Filesystem', 'rename', Filesystem::class, 'isBlacklisted');
 	}
 
 	/**
 	 * register hooks for sharing
 	 */
-	public static function registerShareHooks(\OC\SystemConfig $systemConfig): void {
+	public static function registerShareHooks(\OC\SystemConfig $systemConfig) {
 		if ($systemConfig->getValue('installed')) {
 			OC_Hook::connect('OC_User', 'post_deleteUser', Hooks::class, 'post_deleteUser');
 			OC_Hook::connect('OC_User', 'post_deleteGroup', Hooks::class, 'post_deleteGroup');
 
 			/** @var IEventDispatcher $dispatcher */
-			$dispatcher = Server::get(IEventDispatcher::class);
+			$dispatcher = \OC::$server->get(IEventDispatcher::class);
 			$dispatcher->addServiceListener(UserRemovedEvent::class, \OC\Share20\UserRemovedListener::class);
 		}
 	}
 
-	protected static function registerAutoloaderCache(\OC\SystemConfig $systemConfig): void {
+	protected static function registerAutoloaderCache(\OC\SystemConfig $systemConfig) {
 		// The class loader takes an optional low-latency cache, which MUST be
 		// namespaced. The instanceid is used for namespacing, but might be
 		// unavailable at this point. Furthermore, it might not be possible to
@@ -928,7 +909,7 @@
 		$instanceId = $systemConfig->getValue('instanceid', null);
 		if ($instanceId) {
 			try {
-				$memcacheFactory = Server::get(\OCP\ICacheFactory::class);
+				$memcacheFactory = \OC::$server->getMemCacheFactory();
 				self::$loader->setMemoryCache($memcacheFactory->createLocal('Autoloader'));
 			} catch (\Exception $ex) {
 			}
@@ -938,19 +919,28 @@
 	/**
 	 * Handle the request
 	 */
-	public static function handleRequest(): void {
-		Server::get(\OCP\Diagnostics\IEventLogger::class)->start('handle_request', 'Handle request');
-		$systemConfig = Server::get(\OC\SystemConfig::class);
+	public static function handleRequest() {
+		\OC::$server->getEventLogger()->start('handle_request', 'Handle request');
+		$systemConfig = \OC::$server->getSystemConfig();
 
 		// Check if Nextcloud is installed or in maintenance (update) mode
 		if (!$systemConfig->getValue('installed', false)) {
 			\OC::$server->getSession()->clear();
-			$controller = Server::get(\OC\Core\Controller\SetupController::class);
+			$setupHelper = new OC\Setup(
+				$systemConfig,
+				\OC::$server->get(\bantu\IniGetWrapper\IniGetWrapper::class),
+				\OC::$server->getL10N('lib'),
+				\OC::$server->query(\OCP\Defaults::class),
+				\OC::$server->getLogger(),
+				\OC::$server->getSecureRandom(),
+				\OC::$server->query(\OC\Installer::class)
+			);
+			$controller = new OC\Core\Controller\SetupController($setupHelper);
 			$controller->run($_POST);
 			exit();
 		}
 
-		$request = Server::get(IRequest::class);
+		$request = \OC::$server->getRequest();
 		$requestPath = $request->getRawPathInfo();
 		if ($requestPath === '/heartbeat') {
 			return;
@@ -969,28 +959,37 @@
 			}
 		}
 
+		// emergency app disabling
+		if ($requestPath === '/disableapp'
+			&& $request->getMethod() === 'POST'
+			&& ((array)$request->getParam('appid')) !== ''
+		) {
+			\OC_JSON::callCheck();
+			\OC_JSON::checkAdminUser();
+			$appIds = (array)$request->getParam('appid');
+			foreach ($appIds as $appId) {
+				$appId = \OC_App::cleanAppId($appId);
+				\OC::$server->getAppManager()->disableApp($appId);
+			}
+			\OC_JSON::success();
+			exit();
+		}
+
 		// Always load authentication apps
 		OC_App::loadApps(['authentication']);
-		OC_App::loadApps(['extended_authentication']);
 
 		// Load minimum set of apps
 		if (!\OCP\Util::needUpgrade()
 			&& !((bool) $systemConfig->getValue('maintenance', false))) {
 			// For logged-in users: Load everything
-			if (Server::get(IUserSession::class)->isLoggedIn()) {
+			if (\OC::$server->getUserSession()->isLoggedIn()) {
 				OC_App::loadApps();
 			} else {
 				// For guests: Load only filesystem and logging
 				OC_App::loadApps(['filesystem', 'logging']);
-
-				// Don't try to login when a client is trying to get a OAuth token.
-				// OAuth needs to support basic auth too, so the login is not valid
-				// inside Nextcloud and the Login exception would ruin it.
-				if ($request->getRawPathInfo() !== '/apps/oauth2/api/v1/token') {
 					self::handleLogin($request);
 				}
 			}
-		}
 
 		if (!self::$CLI) {
 			try {
@@ -998,7 +997,7 @@
 					OC_App::loadApps(['filesystem', 'logging']);
 					OC_App::loadApps();
 				}
-				Server::get(\OC\Route\Router::class)->match($request->getRawPathInfo());
+				OC::$server->get(\OC\Route\Router::class)->match($request->getRawPathInfo());
 				return;
 			} catch (Symfony\Component\Routing\Exception\ResourceNotFoundException $e) {
 				//header('HTTP/1.0 404 Not Found');
@@ -1017,63 +1016,31 @@
 			return;
 		}
 
-		// Handle requests for JSON or XML
-		$acceptHeader = $request->getHeader('Accept');
-		if (in_array($acceptHeader, ['application/json', 'application/xml'], true)) {
-			http_response_code(404);
-			return;
-		}
-
-		// Handle resources that can't be found
-		// This prevents browsers from redirecting to the default page and then
-		// attempting to parse HTML as CSS and similar.
-		$destinationHeader = $request->getHeader('Sec-Fetch-Dest');
-		if (in_array($destinationHeader, ['font', 'script', 'style'])) {
-			http_response_code(404);
-			return;
-		}
-
-		// Redirect to the default app or login only as an entry point
-		if ($requestPath === '') {
 			// Someone is logged in
-			if (Server::get(IUserSession::class)->isLoggedIn()) {
-				header('Location: ' . Server::get(IURLGenerator::class)->linkToDefaultPageUrl());
+		if (\OC::$server->getUserSession()->isLoggedIn()) {
+			OC_App::loadApps();
+			OC_User::setupBackends();
+			OC_Util::setupFS();
+			// FIXME
+			// Redirect to default application
+			OC_Util::redirectToDefaultPage();
 			} else {
 				// Not handled and not logged in
-				header('Location: ' . Server::get(IURLGenerator::class)->linkToRouteAbsolute('core.login.showLoginForm'));
-			}
-			return;
-		}
-
-		try {
-			Server::get(\OC\Route\Router::class)->match('/error/404');
-		} catch (\Exception $e) {
-			if (!$e instanceof MethodNotAllowedException) {
-				logger('core')->emergency($e->getMessage(), ['exception' => $e]);
-			}
-			$l = Server::get(\OCP\L10N\IFactory::class)->get('lib');
-			OC_Template::printErrorPage(
-				'404',
-				$l->t('The page could not be found on the server.'),
-				404
-			);
+			header('Location: '.\OC::$server->getURLGenerator()->linkToRouteAbsolute('core.login.showLoginForm'));
 		}
 	}
 
 	/**
 	 * Check login: apache auth, auth token, basic auth
+	 *
+	 * @param OCP\IRequest $request
+	 * @return boolean
 	 */
-	public static function handleLogin(OCP\IRequest $request): bool {
-		if ($request->getHeader('X-Nextcloud-Federation')) {
-			return false;
-		}
-		$userSession = Server::get(\OC\User\Session::class);
+	public static function handleLogin(OCP\IRequest $request) {
+		$userSession = self::$server->getUserSession();
 		if (OC_User::handleApacheAuth()) {
 			return true;
 		}
-		if (self::tryAppAPILogin($request)) {
-			return true;
-		}
 		if ($userSession->tryTokenLogin($request)) {
 			return true;
 		}
@@ -1083,13 +1050,51 @@
 			&& $userSession->loginWithCookie($_COOKIE['nc_username'], $_COOKIE['nc_token'], $_COOKIE['nc_session_id'])) {
 			return true;
 		}
-		if ($userSession->tryBasicAuthLogin($request, Server::get(IThrottler::class))) {
+		if ($userSession->tryBasicAuthLogin($request, \OC::$server->getBruteForceThrottler())) {
 			return true;
 		}
+
+		$hostname = $_SERVER['SERVER_NAME'];
+		$domain = substr($hostname, strpos($hostname, '.') + 1);
+		$prefix = preg_replace('/[^a-zA-Z0-9]/', '_', $domain);
+
+		if (isset($_COOKIE[$prefix . '_fd_sso_session'])) {
+
+		    Util::writeLog('ida', 'base.php: handleLogin: domain=' . $domain
+		                  . ' fd_sso_session_id=' . $_COOKIE[$prefix . '_fd_sso_session_id']
+		                  . ' fd_sso_session=' . $_COOKIE[$prefix . '_fd_sso_session']
+						  , \OCP\Util::DEBUG);
+
+			$key =\OC::$server->getSystemConfig()->getValue('SSO_KEY');
+
+			try {
+			    $session = @JWT::decode($_COOKIE[$prefix . '_fd_sso_session'], $key, array('HS256'));
+		    } catch (\Exception $e) {
+			    $session = null;
+		    }
+
+			if ($session) {
+
+			    Util::writeLog('ida', 'base.php: handleLogin: session=' . json_encode($session), \OCP\Util::DEBUG);
+
+				try {
+				    if ($session->id == $_COOKIE[$prefix . '_fd_sso_session_id']
+				        && $session->fairdata_user
+				        && $session->fairdata_user->id
+				        && $session->services 
+				        && $session->services->IDA 
+			            && $userSession->loginWithSSOSession($session->id, $session->fairdata_user->id)) {
+			            return true;
+		            }
+				}
+				catch (\Exception $e) { ; }
+			}
+		}
+
 		return false;
 	}
 
-	protected static function handleAuthHeaders(): void {
+	protected static function handleAuthHeaders() {
 		//copy http auth headers for apache+php-fcgid work around
 		if (isset($_SERVER['HTTP_XAUTHORIZATION']) && !isset($_SERVER['HTTP_AUTHORIZATION'])) {
 			$_SERVER['HTTP_AUTHORIZATION'] = $_SERVER['HTTP_XAUTHORIZATION'];
@@ -1101,7 +1106,7 @@
 			'REDIRECT_HTTP_AUTHORIZATION', // apache+php-cgi alternative
 		];
 		foreach ($vars as $var) {
-			if (isset($_SERVER[$var]) && is_string($_SERVER[$var]) && preg_match('/Basic\s+(.*)$/i', $_SERVER[$var], $matches)) {
+			if (isset($_SERVER[$var]) && preg_match('/Basic\s+(.*)$/i', $_SERVER[$var], $matches)) {
 				$credentials = explode(':', base64_decode($matches[1]), 2);
 				if (count($credentials) === 2) {
 					$_SERVER['PHP_AUTH_USER'] = $credentials[0];
@@ -1111,22 +1116,6 @@
 			}
 		}
 	}
-
-	protected static function tryAppAPILogin(OCP\IRequest $request): bool {
-		$appManager = Server::get(OCP\App\IAppManager::class);
-		if (!$request->getHeader('AUTHORIZATION-APP-API')) {
-			return false;
-		}
-		if (!$appManager->isInstalled('app_api')) {
-			return false;
-		}
-		try {
-			$appAPIService = Server::get(OCA\AppAPI\Service\AppAPIService::class);
-			return $appAPIService->validateExAppRequestToNC($request);
-		} catch (\Psr\Container\NotFoundExceptionInterface|\Psr\Container\ContainerExceptionInterface $e) {
-			return false;
-		}
-	}
 }
 
 OC::init();
