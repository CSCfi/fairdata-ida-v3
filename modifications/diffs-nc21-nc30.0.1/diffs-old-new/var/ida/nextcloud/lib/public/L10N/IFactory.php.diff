--- /var/ida/nextcloud-new/lib/public/L10N/IFactory.php	2024-11-05 08:30:09.548706695 +0000
+++ /var/ida/nextcloud-old/lib/public/L10N/IFactory.php	2024-02-20 10:11:39.363443559 +0000
@@ -1,11 +1,32 @@
 <?php
-
-declare(strict_types=1);
 /**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-only
+ * @copyright Copyright (c) 2016, ownCloud, Inc.
+ *
+ * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
+ * @author Georg Ehrke <oc.list@georgehrke.com>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
+ * @author Julius Härtl <jus@bitgrid.net>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author Thomas Citharel <nextcloud@tcit.fr>
+ *
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program. If not, see <http://www.gnu.org/licenses/>
+ *
  */
+
 namespace OCP\L10N;
 
 use OCP\IUser;
@@ -26,35 +47,13 @@
 	public function get($app, $lang = null, $locale = null);
 
 	/**
-	 * Find the best language for the context of the current user
-	 *
-	 * This method will try to find the most specific language based on info
-	 * from the user who is logged into the current process and will fall
-	 * back to system settings and heuristics otherwise.
+	 * Find the best language
 	 *
-	 * @param string|null $appId specify if you only want a language a specific app supports
-	 *
-	 * @return string language code, defaults to 'en' if no other matches are found
+	 * @param string|null $app App id or null for core
+	 * @return string language If nothing works it returns 'en'
 	 * @since 9.0.0
 	 */
-	public function findLanguage(?string $appId = null): string;
-
-	/**
-	 * Try to find the best language for generic tasks
-	 *
-	 * This method will try to find the most generic language based on system
-	 * settings, independent of the user logged into the current process. This
-	 * is useful for tasks that are run for another user. E.g. the current user
-	 * sends an email to someone else, then we don't want the current user's
-	 * language to be picked but rather a instance-wide default that likely fits
-	 * the target user
-	 *
-	 * @param string|null $appId specify if you only want a language a specific app supports
-	 *
-	 * @return string language code, defaults to 'en' if no other matches are found
-	 * @since 23.0.0
-	 */
-	public function findGenericLanguage(?string $appId = null): string;
+	public function findLanguage($app = null);
 
 	/**
 	 * @param string|null $lang user language as default locale
@@ -71,7 +70,7 @@
 	 * @return null|string
 	 * @since 14.0.1
 	 */
-	public function findLanguageFromLocale(string $app = 'core', ?string $locale = null);
+	public function findLanguageFromLocale(string $app = 'core', string $locale = null);
 
 	/**
 	 * Find all available languages for an app
@@ -80,7 +79,7 @@
 	 * @return string[] an array of available languages
 	 * @since 9.0.0
 	 */
-	public function findAvailableLanguages($app = null): array;
+	public function findAvailableLanguages($app = null);
 
 	/**
 	 * @return array an array of available
@@ -104,6 +103,15 @@
 	public function localeExists($locale);
 
 	/**
+	 * Creates a function from the plural string
+	 *
+	 * @param string $string
+	 * @return string Unique function name
+	 * @since 14.0.0
+	 */
+	public function createPluralFunction($string);
+
+	/**
 	 * iterate through language settings (if provided) in this order:
 	 * 1. returns the forced language or:
 	 * 2. if applicable, the trunk of 1 (e.g. "fu" instead of "fu_BAR"
@@ -117,15 +125,7 @@
 	 *
 	 * @since 14.0.0
 	 */
-	public function getLanguageIterator(?IUser $user = null): ILanguageIterator;
-
-	/**
-	 * returns the common language and other languages in an
-	 * associative array
-	 *
-	 * @since 23.0.0
-	 */
-	public function getLanguages(): array;
+	public function getLanguageIterator(IUser $user = null): ILanguageIterator;
 
 	/**
 	 * Return the language to use when sending something to a user
@@ -134,5 +134,8 @@
 	 * @return string
 	 * @since 20.0.0
 	 */
-	public function getUserLanguage(?IUser $user = null): string;
+	public function getUserLanguage(IUser $user = null): string;
+	
+	/* Added missing definition */
+	public function getLanguages();
 }
