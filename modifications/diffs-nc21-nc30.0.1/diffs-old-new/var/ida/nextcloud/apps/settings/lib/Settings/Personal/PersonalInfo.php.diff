--- /var/ida/nextcloud-new/apps/settings/lib/Settings/Personal/PersonalInfo.php	2024-11-05 08:30:08.893704428 +0000
+++ /var/ida/nextcloud-old/apps/settings/lib/Settings/Personal/PersonalInfo.php	2024-02-20 10:11:37.864438477 +0000
@@ -3,21 +3,44 @@
 declare(strict_types=1);
 
 /**
- * SPDX-FileCopyrightText: 2017 Nextcloud GmbH and Nextcloud contributors
- * SPDX-License-Identifier: AGPL-3.0-or-later
+ * @copyright Copyright (c) 2017 Arthur Schiwon <blizzz@arthur-schiwon.de>
+ *
+ * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Georg Ehrke <oc.list@georgehrke.com>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author John Molakvo√¶ (skjnldsv) <skjnldsv@protonmail.com>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Robin Appelman <robin@icewind.nl>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author Thomas Citharel <nextcloud@tcit.fr>
+ * @author Vincent Petry <vincent@nextcloud.com>
+ *
+ * @license GNU AGPL version 3 or any later version
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ *
  */
 
 namespace OCA\Settings\Settings\Personal;
 
-use OC\Profile\ProfileManager;
+use OC\Accounts\AccountManager;
 use OCA\FederatedFileSharing\FederatedShareProvider;
-use OCA\Provisioning_API\Controller\AUserData;
 use OCP\Accounts\IAccount;
 use OCP\Accounts\IAccountManager;
-use OCP\Accounts\IAccountProperty;
 use OCP\App\IAppManager;
 use OCP\AppFramework\Http\TemplateResponse;
-use OCP\AppFramework\Services\IInitialState;
 use OCP\Files\FileInfo;
 use OCP\IConfig;
 use OCP\IGroup;
@@ -26,7 +49,6 @@
 use OCP\IUser;
 use OCP\IUserManager;
 use OCP\L10N\IFactory;
-use OCP\Notification\IManager;
 use OCP\Settings\ISettings;
 
 class PersonalInfo implements ISettings {
@@ -33,60 +55,38 @@
 
 	/** @var IConfig */
 	private $config;
-
 	/** @var IUserManager */
 	private $userManager;
-
-	/** @var IAccountManager */
+	/** @var AccountManager */
 	private $accountManager;
-
-	/** @var ProfileManager */
-	private $profileManager;
-
 	/** @var IGroupManager */
 	private $groupManager;
-
 	/** @var IAppManager */
 	private $appManager;
-
 	/** @var IFactory */
 	private $l10nFactory;
-
 	/** @var IL10N */
 	private $l;
 
-	/** @var IInitialState */
-	private $initialStateService;
-
-	/** @var IManager */
-	private $manager;
-
 	public function __construct(
 		IConfig $config,
 		IUserManager $userManager,
 		IGroupManager $groupManager,
-		IAccountManager $accountManager,
-		ProfileManager $profileManager,
+		AccountManager $accountManager,
 		IAppManager $appManager,
 		IFactory $l10nFactory,
-		IL10N $l,
-		IInitialState $initialStateService,
-		IManager $manager
+		IL10N $l
 	) {
 		$this->config = $config;
 		$this->userManager = $userManager;
 		$this->accountManager = $accountManager;
-		$this->profileManager = $profileManager;
 		$this->groupManager = $groupManager;
 		$this->appManager = $appManager;
 		$this->l10nFactory = $l10nFactory;
 		$this->l = $l;
-		$this->initialStateService = $initialStateService;
-		$this->manager = $manager;
 	}
 
 	public function getForm(): TemplateResponse {
-		$federationEnabled = $this->appManager->isEnabledForUser('federation');
 		$federatedFileSharingEnabled = $this->appManager->isEnabledForUser('federatedfilesharing');
 		$lookupServerUploadEnabled = false;
 		if ($federatedFileSharingEnabled) {
@@ -109,86 +109,43 @@
 			$totalSpace = \OC_Helper::humanFileSize($storageInfo['total']);
 		}
 
+		$languageParameters = $this->getLanguages($user);
+		$localeParameters = $this->getLocales($user);
 		$messageParameters = $this->getMessageParameters($account);
 
 		$parameters = [
-			'lookupServerUploadEnabled' => $lookupServerUploadEnabled,
-			'isFairUseOfFreePushService' => $this->isFairUseOfFreePushService(),
-			'profileEnabledGlobally' => $this->profileManager->isProfileEnabled(),
-		] + $messageParameters;
-
-		$personalInfoParameters = [
-			'userId' => $uid,
-			'avatar' => $this->getProperty($account, IAccountManager::PROPERTY_AVATAR),
-			'groups' => $this->getGroups($user),
-			'quota' => $storageInfo['quota'],
-			'totalSpace' => $totalSpace,
+			'total_space' => $totalSpace,
 			'usage' => \OC_Helper::humanFileSize($storageInfo['used']),
-			'usageRelative' => round($storageInfo['relative']),
-			'displayName' => $this->getProperty($account, IAccountManager::PROPERTY_DISPLAYNAME),
-			'emailMap' => $this->getEmailMap($account),
-			'phone' => $this->getProperty($account, IAccountManager::PROPERTY_PHONE),
-			'defaultPhoneRegion' => $this->config->getSystemValueString('default_phone_region'),
-			'location' => $this->getProperty($account, IAccountManager::PROPERTY_ADDRESS),
-			'website' => $this->getProperty($account, IAccountManager::PROPERTY_WEBSITE),
-			'twitter' => $this->getProperty($account, IAccountManager::PROPERTY_TWITTER),
-			'fediverse' => $this->getProperty($account, IAccountManager::PROPERTY_FEDIVERSE),
-			'languageMap' => $this->getLanguageMap($user),
-			'localeMap' => $this->getLocaleMap($user),
-			'profileEnabledGlobally' => $this->profileManager->isProfileEnabled(),
-			'profileEnabled' => $this->profileManager->isProfileEnabled($user),
-			'organisation' => $this->getProperty($account, IAccountManager::PROPERTY_ORGANISATION),
-			'role' => $this->getProperty($account, IAccountManager::PROPERTY_ROLE),
-			'headline' => $this->getProperty($account, IAccountManager::PROPERTY_HEADLINE),
-			'biography' => $this->getProperty($account, IAccountManager::PROPERTY_BIOGRAPHY),
-			'birthdate' => $this->getProperty($account, IAccountManager::PROPERTY_BIRTHDATE),
-			'firstDayOfWeek' => $this->config->getUserValue($uid, 'core', AUserData::USER_FIELD_FIRST_DAY_OF_WEEK),
-		];
-
-		$accountParameters = [
+			'usage_relative' => round($storageInfo['relative']),
+			'quota' => $storageInfo['quota'],
 			'avatarChangeSupported' => $user->canChangeAvatar(),
-			'displayNameChangeSupported' => $user->canChangeDisplayName(),
-			'federationEnabled' => $federationEnabled,
 			'lookupServerUploadEnabled' => $lookupServerUploadEnabled,
-		];
-
-		$profileParameters = [
-			'profileConfig' => $this->profileManager->getProfileConfigWithMetadata($user, $user),
-		];
+			'avatarScope' => $account->getProperty(IAccountManager::PROPERTY_AVATAR)->getScope(),
+			'displayNameChangeSupported' => $user->canChangeDisplayName(),
+			'displayName' => $account->getProperty(IAccountManager::PROPERTY_DISPLAYNAME)->getValue(),
+			'displayNameScope' => $account->getProperty(IAccountManager::PROPERTY_DISPLAYNAME)->getScope(),
+			'email' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getValue(),
+			'emailScope' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getScope(),
+			'emailVerification' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getVerified(),
+			'phone' => $account->getProperty(IAccountManager::PROPERTY_PHONE)->getValue(),
+			'phoneScope' => $account->getProperty(IAccountManager::PROPERTY_PHONE)->getScope(),
+			'address' => $account->getProperty(IAccountManager::PROPERTY_ADDRESS)->getValue(),
+			'addressScope' => $account->getProperty(IAccountManager::PROPERTY_ADDRESS)->getScope(),
+			'website' => $account->getProperty(IAccountManager::PROPERTY_WEBSITE)->getValue(),
+			'websiteScope' => $account->getProperty(IAccountManager::PROPERTY_WEBSITE)->getScope(),
+			'websiteVerification' => $account->getProperty(IAccountManager::PROPERTY_WEBSITE)->getVerified(),
+			'twitter' => $account->getProperty(IAccountManager::PROPERTY_TWITTER)->getValue(),
+			'twitterScope' => $account->getProperty(IAccountManager::PROPERTY_TWITTER)->getScope(),
+			'twitterVerification' => $account->getProperty(IAccountManager::PROPERTY_TWITTER)->getVerified(),
+			'groups' => $this->getGroups($user),
+		] + $messageParameters + $languageParameters + $localeParameters;
 
-		$this->initialStateService->provideInitialState('profileEnabledGlobally', $this->profileManager->isProfileEnabled());
-		$this->initialStateService->provideInitialState('personalInfoParameters', $personalInfoParameters);
-		$this->initialStateService->provideInitialState('accountParameters', $accountParameters);
-		$this->initialStateService->provideInitialState('profileParameters', $profileParameters);
 
 		return new TemplateResponse('settings', 'settings/personal/personal.info', $parameters, '');
 	}
 
 	/**
-	 * Check if is fair use of free push service
-	 * @return boolean
-	 */
-	private function isFairUseOfFreePushService(): bool {
-		return $this->manager->isFairUseOfFreePushService();
-	}
-
-	/**
-	 * returns the property data in an
-	 * associative array
-	 */
-	private function getProperty(IAccount $account, string $property): array {
-		$property = [
-			'name' => $account->getProperty($property)->getName(),
-			'value' => $account->getProperty($property)->getValue(),
-			'scope' => $account->getProperty($property)->getScope(),
-			'verified' => $account->getProperty($property)->getVerified(),
-		];
-
-		return $property;
-	}
-
-	/**
-	 * returns the section ID string, e.g. 'sharing'
+	 * @return string the section ID, e.g. 'sharing'
 	 * @since 9.1
 	 */
 	public function getSection(): string {
@@ -209,6 +166,9 @@
 
 	/**
 	 * returns a sorted list of the user's group GIDs
+	 *
+	 * @param IUser $user
+	 * @return array
 	 */
 	private function getGroups(IUser $user): array {
 		$groups = array_map(
@@ -223,44 +183,13 @@
 	}
 
 	/**
-	 * returns the primary email and additional emails in an
-	 * associative array
-	 */
-	private function getEmailMap(IAccount $account): array {
-		$systemEmail = [
-			'name' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getName(),
-			'value' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getValue(),
-			'scope' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getScope(),
-			'verified' => $account->getProperty(IAccountManager::PROPERTY_EMAIL)->getVerified(),
-		];
-
-		$additionalEmails = array_map(
-			function (IAccountProperty $property) {
-				return [
-					'name' => $property->getName(),
-					'value' => $property->getValue(),
-					'scope' => $property->getScope(),
-					'verified' => $property->getVerified(),
-					'locallyVerified' => $property->getLocallyVerified(),
-				];
-			},
-			$account->getPropertyCollection(IAccountManager::COLLECTION_EMAIL)->getProperties(),
-		);
-
-		$emailMap = [
-			'primaryEmail' => $systemEmail,
-			'additionalEmails' => $additionalEmails,
-			'notificationEmail' => (string)$account->getUser()->getPrimaryEMailAddress(),
-		];
-
-		return $emailMap;
-	}
-
-	/**
-	 * returns the user's active language, common languages, and other languages in an
+	 * returns the user language, common language and other languages in an
 	 * associative array
+	 *
+	 * @param IUser $user
+	 * @return array
 	 */
-	private function getLanguageMap(IUser $user): array {
+	private function getLanguages(IUser $user): array {
 		$forceLanguage = $this->config->getSystemValue('force_language', false);
 		if ($forceLanguage !== false) {
 			return [];
@@ -269,16 +198,20 @@
 		$uid = $user->getUID();
 
 		$userConfLang = $this->config->getUserValue($uid, 'core', 'lang', $this->l10nFactory->findLanguage());
+
+		try {
 		$languages = $this->l10nFactory->getLanguages();
 
 		// associate the user language with the proper array
-		$userLangIndex = array_search($userConfLang, array_column($languages['commonLanguages'], 'code'));
-		$userLang = $languages['commonLanguages'][$userLangIndex];
+		    $userLangIndex = array_search($userConfLang, array_column($languages['commonlanguages'], 'code'));
+		    $userLang = $languages['commonlanguages'][$userLangIndex];
 		// search in the other languages
 		if ($userLangIndex === false) {
-			$userLangIndex = array_search($userConfLang, array_column($languages['otherLanguages'], 'code'));
-			$userLang = $languages['otherLanguages'][$userLangIndex];
+			    $userLangIndex = array_search($userConfLang, array_column($languages['languages'], 'code'));
+			    $userLang = $languages['languages'][$userLangIndex];
 		}
+		} catch (\Exception $e) { ; }
+
 		// if user language is not available but set somehow: show the actual code as name
 		if (!is_array($userLang)) {
 			$userLang = [
@@ -288,12 +221,12 @@
 		}
 
 		return array_merge(
-			['activeLanguage' => $userLang],
+			['activelanguage' => $userLang],
 			$languages
 		);
 	}
 
-	private function getLocaleMap(IUser $user): array {
+	private function getLocales(IUser $user): array {
 		$forceLanguage = $this->config->getSystemValue('force_locale', false);
 		if ($forceLanguage !== false) {
 			return [];
@@ -300,17 +233,30 @@
 		}
 
 		$uid = $user->getUID();
+
 		$userLocaleString = $this->config->getUserValue($uid, 'core', 'locale', $this->l10nFactory->findLocale());
+
 		$userLang = $this->config->getUserValue($uid, 'core', 'lang', $this->l10nFactory->findLanguage());
+
 		$localeCodes = $this->l10nFactory->findAvailableLocales();
-		$userLocale = array_filter($localeCodes, fn ($value) => $userLocaleString === $value['code']);
+
+		$userLocale = array_filter($localeCodes, function ($value) use ($userLocaleString) {
+			if (isset($value['code'])) {
+			    return $userLocaleString === $value['code'];
+			}
+			return false;
+		});
 
 		if (!empty($userLocale)) {
 			$userLocale = reset($userLocale);
 		}
 
-		$localesForLanguage = array_values(array_filter($localeCodes, fn ($localeCode) => str_starts_with($localeCode['code'], $userLang)));
-		$otherLocales = array_values(array_filter($localeCodes, fn ($localeCode) => !str_starts_with($localeCode['code'], $userLang)));
+		$localesForLanguage = array_filter($localeCodes, function ($localeCode) use ($userLang) {
+			if (isset($localeCode['code'])) {
+			    return 0 === strpos($localeCode['code'], $userLang);
+			}
+			return false;
+		});
 
 		if (!$userLocale) {
 			$userLocale = [
@@ -320,25 +266,26 @@
 		}
 
 		return [
-			'activeLocaleLang' => $userLocaleString,
-			'activeLocale' => $userLocale,
+			'activelocaleLang' => $userLocaleString,
+			'activelocale' => $userLocale,
+			'locales' => $localeCodes,
 			'localesForLanguage' => $localesForLanguage,
-			'otherLocales' => $otherLocales,
 		];
 	}
 
 	/**
-	 * returns the message parameters
+	 * @param IAccount $account
+	 * @return array
 	 */
 	private function getMessageParameters(IAccount $account): array {
 		$needVerifyMessage = [IAccountManager::PROPERTY_EMAIL, IAccountManager::PROPERTY_WEBSITE, IAccountManager::PROPERTY_TWITTER];
 		$messageParameters = [];
 		foreach ($needVerifyMessage as $property) {
 			switch ($account->getProperty($property)->getVerified()) {
-				case IAccountManager::VERIFIED:
+				case AccountManager::VERIFIED:
 					$message = $this->l->t('Verifying');
 					break;
-				case IAccountManager::VERIFICATION_IN_PROGRESS:
+				case AccountManager::VERIFICATION_IN_PROGRESS:
 					$message = $this->l->t('Verifying ‚Ä¶');
 					break;
 				default:
