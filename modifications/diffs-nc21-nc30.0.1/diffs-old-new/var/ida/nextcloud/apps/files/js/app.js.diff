--- /var/ida/nextcloud-new/apps/files/js/app.js	2024-11-05 08:30:09.000704798 +0000
+++ /var/ida/nextcloud-old/apps/files/js/app.js	2024-02-20 10:11:36.587434149 +0000
@@ -1,7 +1,14 @@
-/**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2014-2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-or-later
+/*
+ * Copyright (c) 2014
+ *
+ * @author Vincent Petry
+ * @copyright 2014 Vincent Petry <pvince81@owncloud.com>
+ *
+ * This file is licensed under the Affero General Public License version 3
+ * or later.
+ *
+ * See the COPYING-README file.
+ *
  */
 
 /* global dragOptions, folderDropOptions, OC */
@@ -20,9 +27,9 @@
 	 */
 	OCA.Files.App = {
 		/**
-		 * Navigation instance
+		 * Navigation control
 		 *
-		 * @member {OCP.Files.Navigation}
+		 * @member {OCA.Files.Navigation}
 		 */
 		navigation: null,
 
@@ -44,21 +51,26 @@
 		 * Initializes the files app
 		 */
 		initialize: function() {
+			this.navigation = new OCA.Files.Navigation($('#app-navigation'));
 			this.$showHiddenFiles = $('input#showhiddenfilesToggle');
-			var showHidden = $('#showHiddenFiles').val() === "1";
+			var showHidden = true;
 			this.$showHiddenFiles.prop('checked', showHidden);
 
-			// Toggle for grid view
-			this.$showGridView = $('input#showgridview');
-			this.$showGridView.on('change', _.bind(this._onGridviewChange, this));
+			// crop image previews
+			this.$cropImagePreviews = $('input#cropimagepreviewsToggle');
+			var cropImagePreviews = $('#cropImagePreviews').val() === "1";
+			this.$cropImagePreviews.prop('checked', cropImagePreviews);
 
 			if ($('#fileNotFound').val() === "1") {
 				OC.Notification.show(t('files', 'File could not be found'), {type: 'error'});
 			}
 
-			this._filesConfig = OCP.InitialState.loadState('files', 'config', {})
+			this._filesConfig = new OC.Backbone.Model({
+				showhidden: true,
+				cropimagepreviews: cropImagePreviews,
+			});
 
-			var { fileid, scrollto, openfile } = OC.Util.History.parseUrlQuery();
+			var urlParams = OC.Util.History.parseUrlQuery();
 			var fileActions = new OCA.Files.FileActions();
 			// default actions
 			fileActions.registerDefaultActions();
@@ -78,42 +90,28 @@
 					folderDropOptions: folderDropOptions,
 					fileActions: fileActions,
 					allowLegacyActions: true,
-					scrollTo: scrollto,
-					openFile: openfile,
+					scrollTo: urlParams.scrollto,
 					filesClient: OC.Files.getClient(),
 					multiSelectMenu: [
 						{
 							name: 'copyMove',
 							displayName:  t('files', 'Move or copy'),
 							iconClass: 'icon-external',
-							order: 10,
 						},
 						{
 							name: 'download',
 							displayName:  t('files', 'Download'),
 							iconClass: 'icon-download',
-							order: 10,
 						},
 						OCA.Files.FileList.MultiSelectMenuActions.ToggleSelectionModeAction,
 						{
 							name: 'delete',
 							displayName:  t('files', 'Delete'),
 							iconClass: 'icon-delete',
-							order: 99,
 						},
-						...(
-							OCA?.SystemTags === undefined ? [] : ([{
-								name: 'tags',
-								displayName:  t('files', 'Tags'),
-								iconClass: 'icon-tag',
-								order: 100,
-							}])
-						),
 					],
 					sorting: {
-						mode: $('#defaultFileSorting').val() === 'basename'
-							? 'name'
-							: $('#defaultFileSorting').val(),
+						mode: $('#defaultFileSorting').val(),
 						direction: $('#defaultFileSortingDirection').val()
 					},
 					config: this._filesConfig,
@@ -131,21 +129,27 @@
 			OC.Plugins.attach('OCA.Files.App', this);
 
 			this._setupEvents();
+			// trigger URL change event handlers
+			this._onPopState(urlParams);
+
+			$('#quota.has-tooltip').tooltip({
+				placement: 'top'
+			});
+
+			this._debouncedPersistShowHiddenFilesState = _.debounce(this._persistShowHiddenFilesState, 1200);
+			this._debouncedPersistCropImagePreviewsState = _.debounce(this._persistCropImagePreviewsState, 1200);
 
 			if (sessionStorage.getItem('WhatsNewServerCheck') < (Date.now() - 3600*1000)) {
 				OCP.WhatsNew.query(); // for Nextcloud server
 				sessionStorage.setItem('WhatsNewServerCheck', Date.now());
 			}
-
-			window._nc_event_bus.emit('files:legacy-view:initialized', this);
-
-			this.navigation = OCP.Files.Navigation
 		},
 
 		/**
 		 * Destroy the app
 		 */
 		destroy: function() {
+			this.navigation = null;
 			this.fileList.destroy();
 			this.fileList = null;
 			this.files = null;
@@ -173,19 +177,10 @@
 		 * they have initialized themselves. Therefore the files list needs to call this
 		 * method manually
 		 *
-		 * @param {OCA.Files.FileList} newFileList -
+		 * @param {OCA.Files.FileList} newFileList
 		 */
 		updateCurrentFileList: function(newFileList) {
-			if (this.currentFileList === newFileList) {
-				return
-			}
-
 			this.currentFileList = newFileList;
-			if (this.currentFileList !== null) {
-				// update grid view to the current value
-				const isGridView = this.$showGridView.is(':checked');
-				this.currentFileList.setGridView(isGridView);
-			}
 		},
 
 		/**
@@ -202,17 +197,15 @@
 		 * @return app container
 		 */
 		getCurrentAppContainer: function() {
-			var viewId = this.getActiveView();
-			return $('#app-content-' + viewId);
+			return this.navigation.getActiveContainer();
 		},
 
 		/**
 		 * Sets the currently active view
 		 * @param viewId view id
 		 */
-		setActiveView: function(viewId) {
-			// The Navigation API will handle the final event
-			window._nc_event_bus.emit('files:legacy-navigation:changed', { id: viewId })
+		setActiveView: function(viewId, options) {
+			this.navigation.setActiveItem(viewId, options);
 		},
 
 		/**
@@ -220,9 +213,7 @@
 		 * @return view id
 		 */
 		getActiveView: function() {
-			return this.navigation
-				&& this.navigation.active
-				&& this.navigation.active.id;
+			return this.navigation.getActiveItem();
 		},
 
 		/**
@@ -243,30 +234,71 @@
 			$('#app-content').delegate('>div', 'changeDirectory', _.bind(this._onDirectoryChanged, this));
 			$('#app-content').delegate('>div', 'afterChangeDirectory', _.bind(this._onAfterDirectoryChanged, this));
 			$('#app-content').delegate('>div', 'changeViewerMode', _.bind(this._onChangeViewerMode, this));
+
+			$('#app-navigation').on('itemChanged', _.bind(this._onNavigationChanged, this));
+			this.$showHiddenFiles.on('change', _.bind(this._onShowHiddenFilesChange, this));
+			this.$cropImagePreviews.on('change', _.bind(this._onCropImagePreviewsChange, this));
+		},
+
+		/**
+		 * Toggle showing hidden files according to the settings checkbox
+		 *
+		 * @returns {undefined}
+		 */
+		_onShowHiddenFilesChange: function() {
+			var show = this.$showHiddenFiles.is(':checked');
+			this._filesConfig.set('showhidden', show);
+			this._debouncedPersistShowHiddenFilesState();
+		},
+
+		/**
+		 * Persist show hidden preference on the server
+		 *
+		 * @returns {undefined}
+		 */
+		_persistShowHiddenFilesState: function() {
+			var show = this._filesConfig.get('showhidden');
+			$.post(OC.generateUrl('/apps/files/api/v1/showhidden'), {
+				show: show
+			});
+		},
+
+		/**
+		 * Toggle cropping image previews according to the settings checkbox
+		 *
+		 * @returns void
+		 */
+		_onCropImagePreviewsChange: function() {
+			var crop = this.$cropImagePreviews.is(':checked');
+			this._filesConfig.set('cropimagepreviews', crop);
+			this._debouncedPersistCropImagePreviewsState();
+		},
+
+		/**
+		 * Persist crop image previews preference on the server
+		 *
+		 * @returns void
+		 */
+		_persistCropImagePreviewsState: function() {
+			var crop = this._filesConfig.get('cropimagepreviews');
+			$.post(OC.generateUrl('/apps/files/api/v1/cropimagepreviews'), {
+				crop: crop
+			});
 		},
 
 		/**
 		 * Event handler for when the current navigation item has changed
 		 */
-		_onNavigationChanged: function(view) {
+		_onNavigationChanged: function(e) {
 			var params;
-			if (view && (view.itemId || view.id)) {
-				if (view.id) {
+			if (e && e.itemId) {
 					params = {
-						view: view.id,
-						dir: '/',
-					}
-				} else {
-					// Legacy handling
-					params = {
-						view: typeof view.view === 'string' && view.view !== '' ? view.view : view.itemId,
-						dir: view.dir ? view.dir : '/'
-					}
-				}
+					view: typeof e.view === 'string' && e.view !== '' ? e.view : e.itemId,
+					dir: e.dir ? e.dir : '/'
+				};
 				this._changeUrl(params.view, params.dir);
-				OCA.Files.Sidebar.close();
-				this.getCurrentAppContainer().trigger(new $.Event('urlChanged', params));
-				window._nc_event_bus.emit('files:navigation:changed')
+				OC.Apps.hideAppSidebar($('.detailsView'));
+				this.navigation.getActiveContainer().trigger(new $.Event('urlChanged', params));
 			}
 		},
 
@@ -274,8 +306,8 @@
 		 * Event handler for when an app notified that its directory changed
 		 */
 		_onDirectoryChanged: function(e) {
-			if (e.dir && !e.changedThroughUrl) {
-				this._changeUrl(this.getActiveView(), e.dir, e.fileId);
+			if (e.dir) {
+				this._changeUrl(this.navigation.getActiveItem(), e.dir, e.fileId);
 			}
 		},
 
@@ -284,7 +316,7 @@
 		 */
 		_onAfterDirectoryChanged: function(e) {
 			if (e.dir && e.fileId) {
-				this._changeUrl(this.getActiveView(), e.dir, e.fileId);
+				this._changeUrl(this.navigation.getActiveItem(), e.dir, e.fileId);
 			}
 		},
 
@@ -295,7 +327,7 @@
 		_onChangeViewerMode: function(e) {
 			var state = !!e.viewerModeEnabled;
 			if (e.viewerModeEnabled) {
-				OCA.Files.Sidebar.close();
+				OC.Apps.hideAppSidebar($('.detailsView'));
 			}
 			$('#app-navigation').toggleClass('hidden', state);
 			$('.app-files').toggleClass('viewer-mode no-sidebar', state);
@@ -309,20 +341,15 @@
 				dir: '/',
 				view: 'files'
 			}, params);
-
-			var lastId = this.getActiveView();
-			if (!this.navigation.views.find(view => view.id === params.view)) {
+			var lastId = this.navigation.getActiveItem();
+			if (!this.navigation.itemExists(params.view)) {
 				params.view = 'files';
 			}
-
-			this.setActiveView(params.view, {silent: true});
-			if (lastId !== this.getActiveView()) {
-				this.getCurrentAppContainer().trigger(new $.Event('show', params));
-				window._nc_event_bus.emit('files:navigation:changed')
+			this.navigation.setActiveItem(params.view, {silent: true});
+			if (lastId !== this.navigation.getActiveItem()) {
+				this.navigation.getActiveContainer().trigger(new $.Event('show'));
 			}
-
-			this.getCurrentAppContainer().trigger(new $.Event('urlChanged', params));
-
+			this.navigation.getActiveContainer().trigger(new $.Event('urlChanged', params));
 		},
 
 		/**
@@ -349,43 +376,13 @@
 				params.fileid = fileId;
 			}
 			var currentParams = OC.Util.History.parseUrlQuery();
-			if (currentParams.dir === params.dir && currentParams.view === params.view) {
-				if (currentParams.fileid !== params.fileid) {
+			if (currentParams.dir === params.dir && currentParams.view === params.view && currentParams.fileid !== params.fileid) {
 					// if only fileid changed or was added, replace instead of push
 					OC.Util.History.replaceState(this._makeUrlParams(params));
-					return
-				}
 			} else {
 				OC.Util.History.pushState(this._makeUrlParams(params));
-				return
 			}
-		},
-
-		/**
-		 * Toggle showing gridview by default or not
-		 *
-		 * @returns {undefined}
-		 */
-		_onGridviewChange: function() {
-			const isGridView = this.$showGridView.is(':checked');
-			// only save state if user is logged in
-			if (OC.currentUser) {
-				$.post(OC.generateUrl('/apps/files/api/v1/showgridview'), {
-					show: isGridView,
-				});
 			}
-			this.$showGridView.next('#view-toggle')
-				.removeClass('icon-toggle-filelist icon-toggle-pictures')
-				.addClass(isGridView ? 'icon-toggle-filelist' : 'icon-toggle-pictures')
-			this.$showGridView.next('#view-toggle')
-				.attr('title', isGridView ? t('files', 'Show list view') : t('files', 'Show grid view'))
-			this.$showGridView.attr('aria-label', isGridView ? t('files', 'Show list view') : t('files', 'Show grid view'))
-
-			if (this.currentFileList) {
-				this.currentFileList.setGridView(isGridView);
-			}
-		},
-
 	};
 })();
 
