--- /var/ida/nextcloud-old/lib/private/Files/Cache/Cache.php	2024-02-20 10:11:39.285443294 +0000
+++ /var/ida/nextcloud-old/lib/private/Files/Cache/Cache.php.original	2024-02-20 10:11:39.285443294 +0000
@@ -55,7 +55,6 @@
 use OCP\Files\Search\ISearchQuery;
 use OCP\Files\Storage\IStorage;
 use OCP\IDBConnection;
-use OCP\Util;
 
 /**
  * Metadata cache for a storage
@@ -270,9 +269,6 @@
 	 * @throws \RuntimeException
 	 */
 	public function insert($file, array $data) {
-
-		\OCP\Util::writeLog('Cache', 'insert:' . ' file=' . $file, \OCP\Util::INFO);
-
 		// normalize file
 		$file = $this->normalize($file);
 
@@ -299,11 +295,6 @@
 		$storageId = $this->getNumericStorageId();
 		$values['storage'] = $storageId;
 
-		// First check if file exists in table and if so, simply update
-		if (($id = $this->getId($file)) > -1) {
-			$this->update($id, $data);
-			return $id;
-		} else {
 		    try {
 			    $builder = $this->connection->getQueryBuilder();
 			    $builder->insert('filecache');
@@ -316,37 +307,20 @@
 				    $fileId = $builder->getLastInsertId();
     
 				    if (count($extensionValues)) {
-			            try {
 				            $query = $this->getQueryBuilder();
 				            $query->insert('filecache_extended');
             
-				            $query->setValue('fileid', $query->createNamedParameter($id, IQueryBuilder::PARAM_INT));
+					$query->setValue('fileid', $query->createNamedParameter($fileId, IQueryBuilder::PARAM_INT));
 				            foreach ($extensionValues as $column => $value) {
 					            $query->setValue($column, $query->createNamedParameter($value));
 				            }
 				            $query->execute();
-			            } catch (UniqueConstraintViolationException $e) {
-				            $query = $this->getQueryBuilder();
-				            $query->update('filecache_extended')
-					            ->whereFileId($id)
-					            ->andWhere($query->expr()->orX(...array_map(function ($key, $value) use ($query) {
-						            return $query->expr()->orX(
-							            $query->expr()->neq($key, $query->createNamedParameter($value)),
-							            $query->expr()->isNull($key)
-						            );
-					            }, array_keys($extensionValues), array_values($extensionValues))));
-				            foreach ($extensionValues as $key => $value) {
-					            $query->set($key, $query->createNamedParameter($value));
-				            }
-				            $query->execute();
-			            }
 				    }
     
 				    $event = new CacheEntryInsertedEvent($this->storage, $file, $fileId, $storageId);
 				    $this->eventDispatcher->dispatch(CacheInsertEvent::class, $event);
 				    $this->eventDispatcher->dispatchTyped($event);
 				    return $fileId;
-			    }
 		    } catch (UniqueConstraintViolationException $e) {
 			    // entry exists already
 			    if ($this->connection->inTransaction()) {
@@ -372,11 +346,9 @@
 	 * @param array $data [$key => $value] the metadata to update, only the fields provided in the array will be updated, non-provided values will remain unchanged
 	 */
 	public function update($id, array $data) {
-
 		if (isset($data['path'])) {
 			// normalize path
 			$data['path'] = $this->normalize($data['path']);
-		    \OCP\Util::writeLog('Cache', 'insert:' . ' path=' . $data['path'], \OCP\Util::INFO);
 		}
 
 		if (isset($data['name'])) {
@@ -407,24 +379,6 @@
 
 		if (count($extensionValues)) {
 
-		    // First check if file exists in table and if so, simply update
-
-		    if ($this->checkIdExtended($id) > -1) {
-				$query = $this->getQueryBuilder();
-				$query->update('filecache_extended')
-					->whereFileId($id)
-					->andWhere($query->expr()->orX(...array_map(function ($key, $value) use ($query) {
-						return $query->expr()->orX(
-							$query->expr()->neq($key, $query->createNamedParameter($value)),
-							$query->expr()->isNull($key)
-						);
-					}, array_keys($extensionValues), array_values($extensionValues))));
-
-				foreach ($extensionValues as $key => $value) {
-					$query->set($key, $query->createNamedParameter($value));
-				}
-				$query->execute();
-		    } else {
 			    try {
 				    $query = $this->getQueryBuilder();
 				    $query->insert('filecache_extended');
@@ -453,7 +407,6 @@
 				    $query->execute();
 			    }
 			}
-		}
 
 		$path = $this->getPathById($id);
 		// path can still be null if the file doesn't exist
@@ -527,8 +480,6 @@
 		// normalize file
 		$file = $this->normalize($file);
 
-		\OCP\Util::writeLog('Cache', 'getId:' . ' file=' . $file, \OCP\Util::DEBUG);
-
 		$query = $this->getQueryBuilder();
 		$query->select('fileid')
 			->from('filecache')
@@ -539,38 +490,10 @@
 		$id = $result->fetchOne();
 		$result->closeCursor();
 
-		\OCP\Util::writeLog('Cache', 'getId:' . ' id=' . $id, \OCP\Util::DEBUG);
-
 		return $id === false ? -1 : (int)$id;
 	}
 
 	/**
-	 * Check if the file id for a file is already present in the filecache_extended table.
-	 *
-	 * Returns the provided file id if it exists in the table, else returns -1
-	 *
-	 * @param string $file
-	 * @return int
-	 */
-	public function checkIdExtended($id) {
-
-		\OCP\Util::writeLog('Cache', 'checkIdExtended:' . ' id=' . $id, \OCP\Util::DEBUG);
-
-		$query = $this->getQueryBuilder();
-		$query->select('fileid')
-			->from('filecache_extended')
-			->whereFileid($id);
-
-		$result = $query->execute();
-		$fileId = $result->fetchOne();
-		$result->closeCursor();
-
-		\OCP\Util::writeLog('Cache', 'checkIdExtended:' . ' fileid=' . $fileId, \OCP\Util::DEBUG);
-
-		return $fileId === false ? -1 : (int)$fileId;
-	}
-
-	/**
 	 * get the id of the parent folder of a file
 	 *
 	 * @param string $file
