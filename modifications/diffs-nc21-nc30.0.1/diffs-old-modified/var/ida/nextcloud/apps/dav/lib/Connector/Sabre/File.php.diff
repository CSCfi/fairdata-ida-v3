--- /var/ida/nextcloud-old/apps/dav/lib/Connector/Sabre/File.php	2024-02-20 10:11:36.516433908 +0000
+++ /var/ida/nextcloud-old/apps/dav/lib/Connector/Sabre/File.php.original	2024-02-20 10:11:36.516433908 +0000
@@ -71,13 +71,9 @@
 use Sabre\DAV\Exception\NotImplemented;
 use Sabre\DAV\Exception\ServiceUnavailable;
 use Sabre\DAV\IFile;
-use OCA\IDA\Controller\DataChangeController;
-use OCP\Util;
 
 class File extends Node implements IFile {
 	protected $request;
-	protected $idaUser = null;
-	protected $idaMode = 'API';
 
 	/**
 	 * Sets up the node, expects a full path name
@@ -95,16 +91,6 @@
 		} else {
 			$this->request = \OC::$server->getRequest();
 		}
-
-		//Util::writeLog('ida', 'File init: server=' . json_encode($_SERVER), \OCP\Util::DEBUG);
-		if (isset($_SERVER['HTTP_IDA_AUTHENTICATED_USER'])) {
-			$this->idaUser = $_SERVER['HTTP_IDA_AUTHENTICATED_USER'];
-		}
-		if (isset($_SERVER['HTTP_IDA_MODE'])) {
-			$values = explode(',', $_SERVER['HTTP_IDA_MODE']);
-			$this->idaMode = $values[0];
-		}
-		Util::writeLog('ida', 'File init: idaUser=' . $this->idaUser . ' idaMode=' . $this->idaMode, \OCP\Util::DEBUG);
 	}
 
 	/**
@@ -148,80 +134,10 @@
 		// verify path of the target
 		$this->verifyPath();
 
-		// Special handling for zero size files
-		$zero_size = false;
-		try {
-			$filesize   = false;
-			$headers    = null;
-			$firstbyte  = null;
-			$test_basis = null;
-		
-			// Retrieve stream metadata
-			$metadata = stream_get_meta_data($data);
-
-			if ($metadata != null && is_array($metadata) && isset($metadata['uri'])) {
-				// First, we'll attempt to get the filesize based on the URI defined in the
-				// stream metadata, assuming the stream wrapper type supports os.filesize;
-				// which if not, it will either return false or throw an exception
-				$test_basis = 'filesize-stat';
-				try {
-				    $file_uri = $metadata['uri'];
-					$filesize = @filesize($file_uri);
-					if ($filesize === 0) {
-						$zero_size = true;
-					}
-				} catch (Exception $e) {
-					$filesize = false;
-				}
-			}
-			if ($filesize === false) {
-				// If we're here, then either no URI was defined or the stream wrapper type does not
-				// support os.filesize, so we'll try to get the size from the content length header,
-				// if it exists
-				$test_basis = 'content-length-header';
-				try {
-				    $headers = @get_headers((string)$data, 1);
-				    if ($headers != null && is_array($headers) && isset($headers['Content-Length'])) {
-					    $filesize = (int)$headers['Content-Length'];
-					    if ($filesize === 0) {
-						    $zero_size = true;
-					    }
-				    }
-				} catch (Exception $e) {
-					$filesize = false;
-				}
-			}
-			if ($filesize === false) {
-				// OK, last recourse is to actually read from the stream, but only if it 
-				// is seekable and thus can be reset to the beginning so there is no loss
-				// of data during the actual copy operation...
-				$test_basis = 'read-first-byte';
-				try {
-				    if (isset($metadata['seekable']) && $metadata['seekable'] === true) {
-					    $firstbyte = @fread($data, 1);
-					    @fseek($data, 0);
-					    if (strlen($firstbyte) === 0) {
-						    $zero_size = true;
-					    }
-				    }
-				} catch (Exception $e) { ; }
-			}
-			\OC::$server->getLogger()->debug('ZERO_SIZE_CHECK: '
-			. ' metadata: '   . json_encode($metadata)
-			. ' headers: '    . json_encode($headers)
-			. ' filesize: '   . json_encode($filesize)
-			. ' firstbyte: '  . json_encode(strlen($firstbyte))
-			. ' zero_size: '  . json_encode($zero_size)
-			. ' test_basis: ' . $test_basis);
-		} catch (Exception $e) {
-			\OC::$server->getLogger()->debug('ZERO_SIZE_CHECK: Error: ' . $e->getMessage());
-		}
-		
 		// chunked handling
 		if (isset($_SERVER['HTTP_OC_CHUNKED'])) {
 			try {
-				$result = $this->createFileChunked($data);
-				return $result;
+				return $this->createFileChunked($data);
 			} catch (\Exception $e) {
 				$this->convertToSabreException($e);
 			}
@@ -310,11 +227,6 @@
 				fclose($target);
 			}
 
-			// Special handling for zero size files
-			if ($zero_size === true && $count === 0) {
-				$result = true;
-			}
-
 			if ($result === false) {
 				$expected = -1;
 				if (isset($_SERVER['CONTENT_LENGTH'])) {
@@ -442,8 +354,6 @@
 			throw new ServiceUnavailable("Failed to check file size: " . $e->getMessage(), 0, $e);
 		}
 
-        DataChangeController::processNextcloudOperation('add', $this->path, null, $this->idaUser, $this->idaMode);
-
 		return '"' . $this->info->getEtag() . '"';
 	}
 
@@ -705,8 +615,6 @@
 
 				$this->fileView->unlockFile($targetPath, ILockingProvider::LOCK_SHARED);
 
-                DataChangeController::processNextcloudOperation('add', $this->path, null, $this->idaUser, $this->idaMode);
-
 				return $info->getEtag();
 			} catch (\Exception $e) {
 				if ($partFile !== null) {
