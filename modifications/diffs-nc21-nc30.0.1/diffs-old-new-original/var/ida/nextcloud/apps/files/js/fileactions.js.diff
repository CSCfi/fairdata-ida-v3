--- /var/ida/nextcloud-new/apps/files/js/fileactions.js	2024-11-05 08:30:09.000704798 +0000
+++ /var/ida/nextcloud-old/apps/files/js/fileactions.js.original	2024-02-20 10:11:36.708434559 +0000
@@ -1,7 +1,11 @@
-/**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2012-2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-or-later
+/*
+ * Copyright (c) 2014
+ *
+ * This file is licensed under the Affero General Public License version 3
+ * or later.
+ *
+ * See the COPYING-README file.
+ *
  */
 
 (function() {
@@ -138,7 +142,6 @@
 				name: name,
 				displayName: action.displayName,
 				mime: mime,
-				filename: action.filename,
 				order: action.order || 0,
 				icon: action.icon,
 				iconClass: action.iconClass,
@@ -152,9 +155,6 @@
 			if (_.isFunction(action.render)) {
 				actionSpec.render = action.render;
 			}
-			if (_.isFunction(action.shouldRender)) {
-				actionSpec.shouldRender = action.shouldRender;
-			}
 			if (!this.actions[mime]) {
 				this.actions[mime] = {};
 			}
@@ -187,13 +187,12 @@
 		 *
 		 * @param {string} mime mime type
 		 * @param {string} type "dir" or "file"
-		 * @param {number} permissions permissions
-		 * @param {string} filename filename
+		 * @param {int} permissions permissions
 		 *
 		 * @return {Object.<string,OCA.Files.FileActions~actionHandler>} map of action name to action spec
 		 */
-		get: function(mime, type, permissions, filename) {
-			var actions = this.getActions(mime, type, permissions, filename);
+		get: function (mime, type, permissions) {
+			var actions = this.getActions(mime, type, permissions);
 			var filteredActions = {};
 			$.each(actions, function (name, action) {
 				filteredActions[name] = action.action;
@@ -206,12 +205,11 @@
 		 *
 		 * @param {string} mime mime type
 		 * @param {string} type "dir" or "file"
-		 * @param {number} permissions permissions
-		 * @param {string} filename filename
+		 * @param {int} permissions permissions
 		 *
 		 * @return {Array.<OCA.Files.FileAction>} array of action specs
 		 */
-		getActions: function(mime, type, permissions, filename) {
+		getActions: function (mime, type, permissions) {
 			var actions = {};
 			if (this.actions.all) {
 				actions = $.extend(actions, this.actions.all);
@@ -230,12 +228,9 @@
 					actions = $.extend(actions, this.actions[mime]);
 				}
 			}
-
 			var filteredActions = {};
-			var self = this;
 			$.each(actions, function(name, action) {
-				if (self.allowedPermissions(action.permissions, permissions) &&
-					self.allowedFilename(action.filename, filename)) {
+				if ((action.permissions === OC.PERMISSION_NONE) || (action.permissions & permissions)) {
 					filteredActions[name] = action;
 				}
 			});
@@ -239,26 +234,15 @@
 					filteredActions[name] = action;
 				}
 			});
-
 			return filteredActions;
 		},
 
-
-		allowedPermissions: function(actionPermissions, permissions) {
-			return (actionPermissions === OC.PERMISSION_NONE || (actionPermissions & permissions));
-		},
-
-		allowedFilename: function(actionFilename, filename) {
-			return (!filename || filename === '' || !actionFilename
-				|| actionFilename === '' || actionFilename === filename);
-		},
-
 		/**
 		 * Returns the default file action handler for the given conditions
 		 *
 		 * @param {string} mime mime type
 		 * @param {string} type "dir" or "file"
-		 * @param {number} permissions permissions
+		 * @param {int} permissions permissions
 		 *
 		 * @return {OCA.Files.FileActions~actionHandler} action handler
 		 *
@@ -290,7 +274,7 @@
 		 *
 		 * @param {string} mime mime type
 		 * @param {string} type "dir" or "file"
-		 * @param {number} permissions permissions
+		 * @param {int} permissions permissions
 		 *
 		 * @return {OCA.Files.FileActions~actionSpec} action spec
 		 * @since 8.2
@@ -366,7 +350,6 @@
 			var menu;
 			var $trigger = context.$file.closest('tr').find('.fileactions .action-menu');
 			$trigger.addClass('open');
-			$trigger.attr('aria-expanded', 'true');
 
 			menu = new OCA.Files.FileActionsMenu();
 
@@ -375,7 +358,6 @@
 			menu.$el.on('afterHide', function() {
 				context.$file.removeClass('mouseOver');
 				$trigger.removeClass('open');
-				$trigger.attr('aria-expanded', 'false');
 				menu.remove();
 			});
 
@@ -402,7 +384,6 @@
 			}, false, context);
 
 			$el.addClass('permanent');
-			$el.attr('aria-expanded', 'false');
 
 		},
 
@@ -416,11 +397,6 @@
 		 * @param {OCA.Files.FileActionContext} context rendering context
 		 */
 		_renderInlineAction: function(actionSpec, isDefault, context) {
-			if (actionSpec.shouldRender) {
-				if (!actionSpec.shouldRender(context)) {
-					return;
-				}
-			}
 			var renderFunc = actionSpec.render || _.bind(this._defaultRenderAction, this);
 			var $actionEl = renderFunc(actionSpec, isDefault, context);
 			if (!$actionEl || !$actionEl.length) {
@@ -466,7 +442,7 @@
 					);
 				}
 			);
-
+			$actionEl.tooltip({placement:'top'});
 			return $actionEl;
 		},
 
@@ -486,8 +462,7 @@
 			var actions = this.get(
 				fileInfoModel.get('mimetype'),
 				fileInfoModel.isDirectory() ? 'dir' : 'file',
-				fileInfoModel.get('permissions'),
-				fileInfoModel.get('name')
+				fileInfoModel.get('permissions')
 			);
 
 			if (actionName) {
@@ -545,8 +520,7 @@
 			var actions = this.getActions(
 				this.getCurrentMimeType(),
 				this.getCurrentType(),
-				this.getCurrentPermissions(),
-				this.getCurrentFile()
+				this.getCurrentPermissions()
 			);
 			var nameLinks;
 			if ($tr.data('renaming')) {
@@ -556,7 +530,7 @@
 			// recreate fileactions container
 			nameLinks = parent.children('a.name');
 			nameLinks.find('.fileactions, .nametext .action').remove();
-			nameLinks.append('<span class="fileactions"></span>');
+			nameLinks.append('<span class="fileactions" />');
 			var defaultAction = this.getDefaultFileAction(
 				this.getCurrentMimeType(),
 				this.getCurrentType(),
@@ -593,8 +567,8 @@
 				Object.values = objectValues;
 			}
 
-			var menuActions = Object.values(actions).filter(function (action) {
-				return action.type !== OCA.Files.FileActions.TYPE_INLINE && (!defaultAction || action.name !== defaultAction.name)
+			var menuActions = Object.values(this.actions.all).filter(function (action) {
+				return action.type !== OCA.Files.FileActions.TYPE_INLINE;
 			});
 			// do not render the menu if nothing is in it
 			if (menuActions.length > 0) {
@@ -669,9 +643,6 @@
 				displayName: function(context) {
 					var permissions = context.fileInfoModel.attributes.permissions;
 					if (permissions & OC.PERMISSION_UPDATE) {
-						if (!context.fileInfoModel.canDownload()) {
-							return t('files', 'Move');
-						}
 						return t('files', 'Move or copy');
 					}
 					return t('files', 'Copy');
@@ -684,12 +655,8 @@
 					var permissions = context.fileInfoModel.attributes.permissions;
 					var actions = OC.dialogs.FILEPICKER_TYPE_COPY;
 					if (permissions & OC.PERMISSION_UPDATE) {
-						if (!context.fileInfoModel.canDownload()) {
-							actions = OC.dialogs.FILEPICKER_TYPE_MOVE;
-						} else {
 							actions = OC.dialogs.FILEPICKER_TYPE_COPY_MOVE;
 						}
-					}
 					var dialogDir = context.dir;
 					if (typeof context.fileList.dirInfo.dirLastCopiedTo !== 'undefined') {
 						dialogDir = context.fileList.dirInfo.dirLastCopiedTo;
@@ -706,67 +673,18 @@
 				}
 			});
 
-			if (Boolean(OC.appswebroots.files_reminders) && Boolean(OC.appswebroots.notifications)) {
-				this.registerAction({
-					name: 'SetReminder',
-					displayName: function(_context) {
-						return t('files', 'Set reminder');
-					},
-					mime: 'all',
-					order: -24,
-					icon: function(_filename, _context) {
-						return OC.imagePath('files_reminders', 'alarm.svg')
-					},
-					permissions: $('#isPublic').val() ? null : OC.PERMISSION_READ,
-					actionHandler: function(_filename, _context) {},
-				});
-			}
-
-			if (!/Android|iPhone|iPad|iPod/i.test(navigator.userAgent) && !!window.oc_current_user) {
-				this.registerAction({
-					name: 'EditLocally',
-					displayName: function(context) {
-						var locked = context.$file.data('locked');
-						if (!locked) {
-							return t('files', 'Edit locally');
-						}
-					},
-					mime: 'all',
-					order: -23,
-					icon: function(filename, context) {
-						var locked = context.$file.data('locked');
-						if (!locked) {
-							return OC.imagePath('files', 'computer.svg')
-						}
-					},
-					permissions: OC.PERMISSION_UPDATE,
-					actionHandler: function (filename, context) {
-						var dir = context.dir || context.fileList.getCurrentDirectory();
-						var path = dir === '/' ? dir + filename : dir + '/' + filename;
-						context.fileList.openLocalClient(path);
-					},
-				});
-			}
-
 			this.registerAction({
 				name: 'Open',
 				mime: 'dir',
 				permissions: OC.PERMISSION_READ,
 				icon: '',
 				actionHandler: function (filename, context) {
-					let dir, id
-					if (context.$file) {
-						dir = context.$file.attr('data-path')
-						id = context.$file.attr('data-id')
-					} else {
-						dir = context.fileList.getCurrentDirectory()
-						id = context.fileId
-					}
+					var dir = context.$file.attr('data-path') || context.fileList.getCurrentDirectory();
 					if (OCA.Files.App && OCA.Files.App.getActiveView() !== 'files') {
 						OCA.Files.App.setActiveView('files', {silent: true});
 						OCA.Files.App.fileList.changeDirectory(OC.joinPaths(dir, filename), true, true);
 					} else {
-						context.fileList.changeDirectory(OC.joinPaths(dir, filename), true, false, parseInt(id, 10));
+						context.fileList.changeDirectory(OC.joinPaths(dir, filename), true, false, parseInt(context.$file.attr('data-id'), 10));
 					}
 				},
 				displayName: t('files', 'Open')
@@ -844,8 +762,7 @@
 	 * display name string for the action, or function that returns the display name.
 	 * Defaults to the name given in name property
 	 * @property {String} mime mime type
-	 * @property {String} filename filename
-	 * @property {number} permissions permissions
+	 * @property {int} permissions permissions
 	 * @property {(Function|String)} icon icon path to the icon or function that returns it (deprecated, use iconClass instead)
 	 * @property {(String|OCA.Files.FileActions~iconClassFunction)} iconClass class name of the icon (recommended for theming)
 	 * @property {OCA.Files.FileActions~renderActionFunction} [render] optional rendering function
