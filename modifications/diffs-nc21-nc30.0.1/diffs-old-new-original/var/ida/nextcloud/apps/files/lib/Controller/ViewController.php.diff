--- /var/ida/nextcloud-new/apps/files/lib/Controller/ViewController.php	2024-11-05 08:30:09.015704850 +0000
+++ /var/ida/nextcloud-old/apps/files/lib/Controller/ViewController.php.original	2024-02-20 10:11:36.748434694 +0000
@@ -1,31 +1,50 @@
 <?php
-
 /**
- * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
- * SPDX-FileCopyrightText: 2016 ownCloud, Inc.
- * SPDX-License-Identifier: AGPL-3.0-only
+ * @copyright Copyright (c) 2016, ownCloud, Inc.
+ *
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Daniel Kesselberg <mail@danielkesselberg.de>
+ * @author fnuesse <felix.nuesse@t-online.de>
+ * @author fnuesse <fnuesse@techfak.uni-bielefeld.de>
+ * @author Joas Schilling <coding@schilljs.com>
+ * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
+ * @author Julius Härtl <jus@bitgrid.net>
+ * @author Lukas Reschke <lukas@statuscode.ch>
+ * @author Max Kovalenko <mxss1998@yandex.ru>
+ * @author Morris Jobke <hey@morrisjobke.de>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ * @author Thomas Müller <thomas.mueller@tmit.eu>
+ * @author Vincent Petry <vincent@nextcloud.com>
+ *
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program. If not, see <http://www.gnu.org/licenses/>
+ *
  */
+
 namespace OCA\Files\Controller;
 
-use OC\Files\FilenameValidator;
-use OCA\Files\AppInfo\Application;
+use OCA\Files\Activity\Helper;
 use OCA\Files\Event\LoadAdditionalScriptsEvent;
-use OCA\Files\Event\LoadSearchPlugins;
 use OCA\Files\Event\LoadSidebar;
-use OCA\Files\Service\UserConfig;
-use OCA\Files\Service\ViewConfig;
 use OCA\Viewer\Event\LoadViewer;
 use OCP\App\IAppManager;
 use OCP\AppFramework\Controller;
-use OCP\AppFramework\Http\Attribute\NoAdminRequired;
-use OCP\AppFramework\Http\Attribute\NoCSRFRequired;
-use OCP\AppFramework\Http\Attribute\OpenAPI;
 use OCP\AppFramework\Http\ContentSecurityPolicy;
 use OCP\AppFramework\Http\RedirectResponse;
 use OCP\AppFramework\Http\Response;
 use OCP\AppFramework\Http\TemplateResponse;
 use OCP\AppFramework\Services\IInitialState;
-use OCP\Collaboration\Resources\LoadAdditionalScriptsEvent as ResourcesLoadAdditionalScriptsEvent;
 use OCP\EventDispatcher\IEventDispatcher;
 use OCP\Files\Folder;
 use OCP\Files\IRootFolder;
@@ -38,28 +57,82 @@
 use OCP\IUserSession;
 
 /**
+ * Class ViewController
+ *
  * @package OCA\Files\Controller
  */
-#[OpenAPI(scope: OpenAPI::SCOPE_IGNORE)]
 class ViewController extends Controller {
+	/** @var string */
+	protected $appName;
+	/** @var IRequest */
+	protected $request;
+	/** @var IURLGenerator */
+	protected $urlGenerator;
+	/** @var IL10N */
+	protected $l10n;
+	/** @var IConfig */
+	protected $config;
+	/** @var IEventDispatcher */
+	protected $eventDispatcher;
+	/** @var IUserSession */
+	protected $userSession;
+	/** @var IAppManager */
+	protected $appManager;
+	/** @var IRootFolder */
+	protected $rootFolder;
+	/** @var Helper */
+	protected $activityHelper;
+	/** @var IInitialState */
+	private $initialState;
+	/** @var ITemplateManager */
+	private $templateManager;
 
-	public function __construct(
-		string $appName,
+	public function __construct(string $appName,
 		IRequest $request,
-		private IURLGenerator $urlGenerator,
-		private IL10N $l10n,
-		private IConfig $config,
-		private IEventDispatcher $eventDispatcher,
-		private IUserSession $userSession,
-		private IAppManager $appManager,
-		private IRootFolder $rootFolder,
-		private IInitialState $initialState,
-		private ITemplateManager $templateManager,
-		private UserConfig $userConfig,
-		private ViewConfig $viewConfig,
-		private FilenameValidator $filenameValidator,
+		IURLGenerator $urlGenerator,
+		IL10N $l10n,
+		IConfig $config,
+		IEventDispatcher $eventDispatcher,
+		IUserSession $userSession,
+		IAppManager $appManager,
+		IRootFolder $rootFolder,
+		Helper $activityHelper,
+		IInitialState $initialState,
+		ITemplateManager $templateManager
 	) {
 		parent::__construct($appName, $request);
+		$this->appName = $appName;
+		$this->request = $request;
+		$this->urlGenerator = $urlGenerator;
+		$this->l10n = $l10n;
+		$this->config = $config;
+		$this->eventDispatcher = $eventDispatcher;
+		$this->userSession = $userSession;
+		$this->appManager = $appManager;
+		$this->rootFolder = $rootFolder;
+		$this->activityHelper = $activityHelper;
+		$this->initialState = $initialState;
+		$this->templateManager = $templateManager;
+	}
+
+	/**
+	 * @param string $appName
+	 * @param string $scriptName
+	 * @return string
+	 */
+	protected function renderScript($appName, $scriptName) {
+		$content = '';
+		$appPath = \OC_App::getAppPath($appName);
+		$scriptPath = $appPath . '/' . $scriptName;
+		if (file_exists($scriptPath)) {
+			// TODO: sanitize path / script name ?
+			ob_start();
+			include $scriptPath;
+			$content = ob_get_contents();
+			@ob_end_clean();
+		}
+
+		return $content;
 	}
 
 	/**
@@ -68,126 +141,155 @@
 	 * @return array
 	 * @throws \OCP\Files\NotFoundException
 	 */
-	protected function getStorageInfo(string $dir = '/') {
-		$rootInfo = \OC\Files\Filesystem::getFileInfo('/', false);
+	protected function getStorageInfo() {
+		\OC_Util::setupFS();
+		$dirInfo = \OC\Files\Filesystem::getFileInfo('/', false);
 
-		return \OC_Helper::getStorageInfo($dir, $rootInfo ?: null);
+		return \OC_Helper::getStorageInfo('/', $dirInfo);
 	}
 
 	/**
+	 * @NoCSRFRequired
+	 * @NoAdminRequired
+	 *
 	 * @param string $fileid
 	 * @return TemplateResponse|RedirectResponse
+	 * @throws NotFoundException
 	 */
-	#[NoAdminRequired]
-	#[NoCSRFRequired]
-	public function showFile(?string $fileid = null): Response {
-		if (!$fileid) {
-			return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.index'));
-		}
-
+	public function showFile(string $fileid = null): Response {
 		// This is the entry point from the `/f/{fileid}` URL which is hardcoded in the server.
 		try {
-			return $this->redirectToFile((int) $fileid);
+			return $this->redirectToFile($fileid);
 		} catch (NotFoundException $e) {
 			return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.index', ['fileNotFound' => true]));
 		}
 	}
 
-
-	/**
-	 * @param string $dir
-	 * @param string $view
-	 * @param string $fileid
-	 * @param bool $fileNotFound
-	 * @return TemplateResponse|RedirectResponse
-	 */
-	#[NoAdminRequired]
-	#[NoCSRFRequired]
-	public function indexView($dir = '', $view = '', $fileid = null, $fileNotFound = false) {
-		return $this->index($dir, $view, $fileid, $fileNotFound);
-	}
-
-	/**
-	 * @param string $dir
-	 * @param string $view
-	 * @param string $fileid
-	 * @param bool $fileNotFound
-	 * @return TemplateResponse|RedirectResponse
-	 */
-	#[NoAdminRequired]
-	#[NoCSRFRequired]
-	public function indexViewFileid($dir = '', $view = '', $fileid = null, $fileNotFound = false) {
-		return $this->index($dir, $view, $fileid, $fileNotFound);
-	}
-
 	/**
+	 * @NoCSRFRequired
+	 * @NoAdminRequired
+	 *
 	 * @param string $dir
 	 * @param string $view
 	 * @param string $fileid
 	 * @param bool $fileNotFound
 	 * @return TemplateResponse|RedirectResponse
+	 * @throws NotFoundException
 	 */
-	#[NoAdminRequired]
-	#[NoCSRFRequired]
 	public function index($dir = '', $view = '', $fileid = null, $fileNotFound = false) {
-		if ($fileid !== null && $view !== 'trashbin') {
+		if ($fileid !== null) {
 			try {
-				return $this->redirectToFileIfInTrashbin((int) $fileid);
+				return $this->redirectToFile($fileid);
 			} catch (NotFoundException $e) {
+				return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.index', ['fileNotFound' => true]));
 			}
 		}
 
+		$nav = new \OCP\Template('files', 'appnavigation', '');
+
 		// Load the files we need
-		\OCP\Util::addInitScript('files', 'init');
 		\OCP\Util::addStyle('files', 'merged');
-		\OCP\Util::addScript('files', 'main');
+		\OCP\Util::addScript('files', 'merged-index');
+		\OCP\Util::addScript('files', 'dist/templates');
+
+		// mostly for the home storage's free space
+		// FIXME: Make non static
+		$storageInfo = $this->getStorageInfo();
 
-		$userId = $this->userSession->getUser()->getUID();
+		$user = $this->userSession->getUser()->getUID();
 
-		// If the file doesn't exists in the folder and
-		// exists in only one occurrence, redirect to that file
-		// in the correct folder
-		if ($fileid && $dir !== '') {
-			$baseFolder = $this->rootFolder->getUserFolder($userId);
-			$nodes = $baseFolder->getById((int) $fileid);
-			if (!empty($nodes)) {
-				$nodePath = $baseFolder->getRelativePath($nodes[0]->getPath());
-				$relativePath = $nodePath ? dirname($nodePath) : '';
-				// If the requested path does not contain the file id
-				// or if the requested path is not the file id itself
-				if (count($nodes) === 1 && $relativePath !== $dir && $nodePath !== $dir) {
-					return $this->redirectToFile((int) $fileid);
+		// Get all the user favorites to create a submenu
+		try {
+			$favElements = $this->activityHelper->getFavoriteFilePaths($this->userSession->getUser()->getUID());
+		} catch (\RuntimeException $e) {
+			$favElements['folders'] = [];
 				}
-			} else { // fileid does not exist anywhere
-				$fileNotFound = true;
+
+		$collapseClasses = '';
+		if (count($favElements['folders']) > 0) {
+			$collapseClasses = 'collapsible';
 			}
+
+		$favoritesSublistArray = [];
+
+		$navBarPositionPosition = 6;
+		$currentCount = 0;
+		foreach ($favElements['folders'] as $favElement) {
+			$link = $this->urlGenerator->linkToRoute('files.view.index', ['dir' => $favElement, 'view' => 'files']);
+			$sortingValue = ++$currentCount;
+			$element = [
+				'id' => str_replace('/', '-', $favElement),
+				'view' => 'files',
+				'href' => $link,
+				'dir' => $favElement,
+				'order' => $navBarPositionPosition,
+				'folderPosition' => $sortingValue,
+				'name' => basename($favElement),
+				'icon' => 'files',
+				'quickaccesselement' => 'true'
+			];
+
+			array_push($favoritesSublistArray, $element);
+			$navBarPositionPosition++;
 		}
 
-		try {
-			// If view is files, we use the directory, otherwise we use the root storage
-			$storageInfo = $this->getStorageInfo(($view === 'files' && $dir) ? $dir : '/');
-		} catch(\Exception $e) {
-			$storageInfo = $this->getStorageInfo();
+		$navItems = \OCA\Files\App::getNavigationManager()->getAll();
+
+		// add the favorites entry in menu
+		$navItems['favorites']['sublist'] = $favoritesSublistArray;
+		$navItems['favorites']['classes'] = $collapseClasses;
+
+		// parse every menu and add the expandedState user value
+		foreach ($navItems as $key => $item) {
+			if (isset($item['expandedState'])) {
+				$navItems[$key]['defaultExpandedState'] = $this->config->getUserValue($this->userSession->getUser()->getUID(), 'files', $item['expandedState'], '0') === '1';
+			}
 		}
 
-		$this->initialState->provideInitialState('storageStats', $storageInfo);
-		$this->initialState->provideInitialState('config', $this->userConfig->getConfigs());
-		$this->initialState->provideInitialState('viewConfigs', $this->viewConfig->getConfigs());
-
-		// File sorting user config
-		$filesSortingConfig = json_decode($this->config->getUserValue($userId, 'files', 'files_sorting_configs', '{}'), true);
-		$this->initialState->provideInitialState('filesSortingConfig', $filesSortingConfig);
-
-		// Forbidden file characters (deprecated use capabilities)
-		// TODO: Remove with next release of `@nextcloud/files`
-		$forbiddenCharacters = $this->filenameValidator->getForbiddenCharacters();
-		$this->initialState->provideInitialState('forbiddenCharacters', $forbiddenCharacters);
+		$nav->assign('navigationItems', $navItems);
+
+		$nav->assign('usage', \OC_Helper::humanFileSize($storageInfo['used']));
+		if ($storageInfo['quota'] === \OCP\Files\FileInfo::SPACE_UNLIMITED) {
+			$totalSpace = $this->l10n->t('Unlimited');
+		} else {
+			$totalSpace = \OC_Helper::humanFileSize($storageInfo['total']);
+		}
+		$nav->assign('total_space', $totalSpace);
+		$nav->assign('quota', $storageInfo['quota']);
+		$nav->assign('usage_relative', $storageInfo['relative']);
+
+		$nav->assign('webdav_url', \OCP\Util::linkToRemote('dav/files/' . $user));
+
+		$contentItems = [];
+
+		// render the container content for every navigation item
+		foreach ($navItems as $item) {
+			$content = '';
+			if (isset($item['script'])) {
+				$content = $this->renderScript($item['appname'], $item['script']);
+			}
+			// parse submenus
+			if (isset($item['sublist'])) {
+				foreach ($item['sublist'] as $subitem) {
+					$subcontent = '';
+					if (isset($subitem['script'])) {
+						$subcontent = $this->renderScript($subitem['appname'], $subitem['script']);
+					}
+					$contentItems[$subitem['id']] = [
+						'id' => $subitem['id'],
+						'content' => $subcontent
+					];
+				}
+			}
+			$contentItems[$item['id']] = [
+				'id' => $item['id'],
+				'content' => $content
+			];
+		}
 
 		$event = new LoadAdditionalScriptsEvent();
 		$this->eventDispatcher->dispatchTyped($event);
-		$this->eventDispatcher->dispatchTyped(new ResourcesLoadAdditionalScriptsEvent());
 		$this->eventDispatcher->dispatchTyped(new LoadSidebar());
-		$this->eventDispatcher->dispatchTyped(new LoadSearchPlugins());
 		// Load Viewer scripts
 		if (class_exists(LoadViewer::class)) {
 			$this->eventDispatcher->dispatchTyped(new LoadViewer());
@@ -192,89 +294,73 @@
 		if (class_exists(LoadViewer::class)) {
 			$this->eventDispatcher->dispatchTyped(new LoadViewer());
 		}
-
 		$this->initialState->provideInitialState('templates_path', $this->templateManager->hasTemplateDirectory() ? $this->templateManager->getTemplatePath() : false);
 		$this->initialState->provideInitialState('templates', $this->templateManager->listCreators());
 
+		$params = [];
+		$params['usedSpacePercent'] = (int) $storageInfo['relative'];
+		$params['owner'] = $storageInfo['owner'] ?? '';
+		$params['ownerDisplayName'] = $storageInfo['ownerDisplayName'] ?? '';
+		$params['isPublic'] = false;
+		$params['allowShareWithLink'] = $this->config->getAppValue('core', 'shareapi_allow_links', 'yes');
+		$params['defaultFileSorting'] = $this->config->getUserValue($user, 'files', 'file_sorting', 'name');
+		$params['defaultFileSortingDirection'] = $this->config->getUserValue($user, 'files', 'file_sorting_direction', 'asc');
+		$params['showgridview'] = $this->config->getUserValue($user, 'files', 'show_grid', false);
+		$params['isIE'] = \OCP\Util::isIE();
+		$showHidden = (bool) $this->config->getUserValue($this->userSession->getUser()->getUID(), 'files', 'show_hidden', false);
+		$params['showHiddenFiles'] = $showHidden ? 1 : 0;
+		$cropImagePreviews = (bool) $this->config->getUserValue($this->userSession->getUser()->getUID(), 'files', 'crop_image_previews', true);
+		$params['cropImagePreviews'] = $cropImagePreviews ? 1 : 0;
+		$params['fileNotFound'] = $fileNotFound ? 1 : 0;
+		$params['appNavigation'] = $nav;
+		$params['appContents'] = $contentItems;
+		$params['hiddenFields'] = $event->getHiddenFields();
+
 		$response = new TemplateResponse(
-			Application::APP_ID,
+			$this->appName,
 			'index',
+			$params
 		);
 		$policy = new ContentSecurityPolicy();
 		$policy->addAllowedFrameDomain('\'self\'');
-		// Allow preview service worker
-		$policy->addAllowedWorkerSrcDomain('\'self\'');
 		$response->setContentSecurityPolicy($policy);
 
 		return $response;
 	}
 
 	/**
-	 * Redirects to the trashbin file list and highlight the given file id
+	 * Redirects to the file list and highlight the given file id
 	 *
-	 * @param int $fileId file id to show
+	 * @param string $fileId file id to show
 	 * @return RedirectResponse redirect response or not found response
-	 * @throws NotFoundException
+	 * @throws \OCP\Files\NotFoundException
 	 */
-	private function redirectToFileIfInTrashbin($fileId): RedirectResponse {
+	private function redirectToFile($fileId) {
 		$uid = $this->userSession->getUser()->getUID();
 		$baseFolder = $this->rootFolder->getUserFolder($uid);
-		$node = $baseFolder->getFirstNodeById($fileId);
+		$files = $baseFolder->getById($fileId);
 		$params = [];
 
-		if (!$node && $this->appManager->isEnabledForUser('files_trashbin')) {
-			/** @var Folder */
+		if (empty($files) && $this->appManager->isEnabledForUser('files_trashbin')) {
 			$baseFolder = $this->rootFolder->get($uid . '/files_trashbin/files/');
-			$node = $baseFolder->getFirstNodeById($fileId);
+			$files = $baseFolder->getById($fileId);
 			$params['view'] = 'trashbin';
-
-			if ($node) {
-				$params['fileid'] = $fileId;
-				if ($node instanceof Folder) {
-					// set the full path to enter the folder
-					$params['dir'] = $baseFolder->getRelativePath($node->getPath());
-				} else {
-					// set parent path as dir
-					$params['dir'] = $baseFolder->getRelativePath($node->getParent()->getPath());
-				}
-				return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.indexViewFileid', $params));
-			}
-		}
-		throw new NotFoundException();
 	}
 
-	/**
-	 * Redirects to the file list and highlight the given file id
-	 *
-	 * @param int $fileId file id to show
-	 * @return RedirectResponse redirect response or not found response
-	 * @throws NotFoundException
-	 */
-	private function redirectToFile(int $fileId) {
-		$uid = $this->userSession->getUser()->getUID();
-		$baseFolder = $this->rootFolder->getUserFolder($uid);
-		$node = $baseFolder->getFirstNodeById($fileId);
-		$params = ['view' => 'files'];
-
-		try {
-			$this->redirectToFileIfInTrashbin($fileId);
-		} catch (NotFoundException $e) {
-		}
-
-		if ($node) {
-			$params['fileid'] = $fileId;
-			if ($node instanceof Folder) {
+		if (!empty($files)) {
+			$file = current($files);
+			if ($file instanceof Folder) {
 				// set the full path to enter the folder
-				$params['dir'] = $baseFolder->getRelativePath($node->getPath());
+				$params['dir'] = $baseFolder->getRelativePath($file->getPath());
 			} else {
 				// set parent path as dir
-				$params['dir'] = $baseFolder->getRelativePath($node->getParent()->getPath());
-				// open the file by default (opening the viewer)
-				$params['openfile'] = 'true';
-			}
-			return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.indexViewFileid', $params));
+				$params['dir'] = $baseFolder->getRelativePath($file->getParent()->getPath());
+				// and scroll to the entry
+				$params['scrollto'] = $file->getName();
 		}
 
-		throw new NotFoundException();
+			return new RedirectResponse($this->urlGenerator->linkToRoute('files.view.index', $params));
+		}
+		throw new \OCP\Files\NotFoundException();
 	}
 }
